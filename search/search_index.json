{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Artificial Intelligence with Python: Notes &amp; Projects","text":"<p>By Joshua Oh</p> <p>This repository serves as a personal documentation of my notes, learnings, and experiments in Artificial Intelligence (AI) using Python. It covers key concepts, algorithms, and practical implementations in Machine Learning (ML) and other AI techniques.</p> <p>Additionally, I\u2019ve included several hands-on projects developed during my free time, showcasing applications of ML models, neural networks, and other AI approaches. These projects reflect my exploration of real-world problem-solving using Python\u2019s AI / ML ecosystem.</p> <p>Feel free to explore, learn, and contribute!</p> <p>Bug</p> <p>Since I wrote everything here myself with some help from AI, there may be some mistakes made. If you seen any mistakes, please email them to:  <pre><code>yuqiao.oh@gmail.com\n</code></pre></p> Why Python for AI? <p>Simplicity &amp; Readability  Intuitive syntax that reads like pseudocode  Easy to prototype and experiment  </p> <p>Powerful Ecosystem  300,000+ packages on PyPI  Specialized libraries for every AI task  </p> <p>Community &amp; Support  Largest programming community  Excellent documentation  </p> <p>Cross-Platform  Runs anywhere from Raspberry Pi to cloud clusters  Interoperates with C/C++/Java  </p> <ul> <li> <p> Coding with Python</p> <p>Master Python fundamentals - syntax, data structures, and OOP concepts. The perfect starting point for beginners.</p> <p> Get Started</p> </li> <li> <p> Data Analysis</p> <p>Explore data manipulation, visualization, and statistical analysis using Pandas, Numpy, and Matplotlib.</p> <p> Analyze Data</p> </li> <li> <p> Basic Algorithms</p> <p>Core AI algorithms including search, optimization, and logic programming. Essential for problem-solving.</p> <p> Learn Algorithms</p> </li> <li> <p> Software with Python</p> <p>Build applications, APIs, and tools using Python frameworks like Flask, Django, and PyQt.</p> <p> Develop Software</p> </li> <li> <p> Advanced ML</p> <p>Deep learning, neural networks, and model training with TensorFlow/PyTorch.</p> <p> Explore AI</p> </li> <li> <p> Personal Projects</p> <p>My implemented solutions - from data pipelines to AI applications with full code walkthroughs.</p> <p> View Projects</p> </li> </ul>"},{"location":"Chapter1/","title":"First Order Logic and Expert Systems","text":""},{"location":"Chapter1/#what-is-logic","title":"What is Logic ?!?!","text":"<ul> <li>Logic is a systematic representation of information and knowledge to be communicated to machine.</li> <li>It is expressed using specific syntax of the representation language to define the semantics of the sentences.</li> <li>syntax : identify if an expression is well formed</li> <li>semantics : identify the meaning of an expression</li> </ul>"},{"location":"Chapter1/#logic-languages","title":"Logic Languages","text":"Language What Exists Within the Language (Ontological Commitment) What an agent believes about facts (Epistemological commitment) Propositional logic Facts True/False First order logic Facts, objects, relations True/False Temporal logic Facts, objects, relations, time True/False Probability theory Facts Degree of belief \u2208 [0, 1] Fuzzy logic Facts with degree of truth \u2208 [0, 1] Known interval value"},{"location":"Chapter1/#propositional-logic","title":"Propositional logic","text":""},{"location":"Chapter1/#logical-connective","title":"Logical connective:","text":"Symbol Name Example English equivalent \u2227 conjunction p \u2227 q p and q \u2228 disjunction p \u2228 q p or q \u00ac or \u223c negation \u00acp or \u223cp not p \u21d2 implication p \u21d2 q p implies qif p then q \u27fa biconditional p \u27fa q p if and only if qp equivalent to q <p>Derivative connective such as XOR(Exclusive OR) and NOR(Negation of OR) are also valid and can be formed using the basic logical operators listed above. \ud83d\ude42</p>"},{"location":"Chapter1/#antecedent-and-consequence","title":"Antecedent and consequence:","text":"<ul> <li>Antecedent: The \"IF\" part of a conditional statement</li> <li>Consequent: The \"Then\" part of a conditional statement</li> <li>Example:If r and p then qr \u2227 p \u21d2 qAntecedent (IF) = r \u2227 pConsequent (Then) = q</li> <li>Antecedent and consequence is used to describe components of a conditional statement, often referred to as an implication (only FALSE when antecedent is true and consequent is false, otherwise it is TRUE) \u2757\u2757\u2757</li> </ul>"},{"location":"Chapter1/#syntax","title":"Syntax:","text":"<ul> <li>Syntax is how an expression (statement) can be formed</li> <li>A correctly formed statement has a meaning within the definition of the language</li> <li>In simple words, syntax is the way to write the statements</li> <li>Examples:</li> </ul> Statements Comment p a fact p \u2227 q a conjunction of 2 facts x4y + = not a well-formed expression 3x + y a well-formed arithmetic expression 3x + y &gt; 2 a valid mathematical inequality <ul> <li>Correct syntax : p \u2227 qIncorrect syntax: p \u2227 (incomplete statement)</li> <li>Statements also called sentences in logic</li> </ul>"},{"location":"Chapter1/#semantics","title":"Semantics:","text":"<ul> <li>Semantics defines the meaning of the sentences within the language it is defined in.</li> <li>can be TRUE or FALSE in propositional logic</li> <li>In logic, semantics provides the rules for interpreting the symbols and sentences of a formal language.</li> <li>Examples:</li> </ul> Statements Comment p This is a simple propositional statement. The meaning of p depends on the interpretation assigned to it. p \u2227 q if p is true and q is true This is a conjunction in propositional logic. The statement p \u2227 q means ''both p and q are true'' ( p \u2227 q  is true if and only if both p and q are true. If either p or q is false, the entire statement is false) 3 x + y &gt; 2 if x is 2 and y is 1 This is a mathematical inequality involving variables x and y. The statement is a predicate logic expression. The truth of this statement depends on the values assigned to x and y."},{"location":"Chapter1/#checkpoint-1-conjunction-disjunction-and-negation","title":"CheckPoint 1 \ud83c\udf86\ud83c\udf86 (Conjunction, Disjunction and Negation):","text":"p q p \u2227 q p \u2228 q \u223cp \u223cq false false false false true true true false false true false true false true false true true false true true true true false false"},{"location":"Chapter1/#implications","title":"Implications:","text":"<ul> <li>Let say,  p \u21d2 q p implies q if p (if true) then q (is true)</li> <li>Same with antecedent and consequent, implication is only FALSE when the antecedent (IF) is TRUE and the consequent (THEN) is FALSE, otherwise it is TRUE</li> <li>Example:</li> </ul> p = it rains q = ground is wet p \u21d2 q if it rains, then ground is wet False False True False True True True False False True True True"},{"location":"Chapter1/#biconditional","title":"Biconditional:","text":"<ul> <li>Let say,  p \u27fa q p if and only if q (is true)</li> <li>So, if p is TRUE, then q is TRUE ; q is TRUE, then p is TRUE</li> <li> <p>Basically, p \u27fa q is true only when both p and q have the same truth value (BOTH True or BOTH False):</p> p q p \u21d2 q q \u21d2 p p \u27fa q false false true true true false true true false false true false false true false true true true true true </li> <li> <p>So, how can we prove that the statement p \u27fa q is correct or wrong? We can show that p and q are logically equivalent (p implies q and q implies p), if both implications hold then p \u27fa q is correct, otherwise it is wrong!</p> </li> <li>Example:</li> </ul> p  it rains q  ground is wet p \u21d2 q  if it rains then ground is wet q \u21d2 p  if ground is wet then it rains p \u27fa q false false true true true false true true false false true false false true false true true true true true"},{"location":"Chapter1/#checkpoint-2-implication-and-biconditional","title":"CheckPoint 2 \ud83c\udf86\ud83c\udf86 (Implication and Biconditional):","text":"p  x is divisible by 2 q  x is even p \u21d2 q q \u21d2 p p \u27fa q false false true true true false true true false false true false false true false true true true true true"},{"location":"Chapter1/#first-order-logic-fol","title":"First Order Logic (FOL)","text":"<ul> <li>It is also called predicate logic due to the addition of predicate variables.</li> <li>FOL adds 3 more concepts to the syntax on top of those in propositional logic, there are:   a. Predicate Variables   b. Universal Quantifier \u2200   c. Existential Quantifier \u2203 </li> <li>There are 3 types of symbols in FOL:   a. Constant Symbols for Objects (represent specific, fixed objects in the domain such as names or fixed objects in the domain that do not change).   b. Predicate Symbols for Relations (represent relations or properties that can be true or false about objects in the domain &amp; they also help describe the characteristics of objects or define relationships between them).   c. Function Symbols for Functions (represent mappings from one or more objects to another object; they can take constants, variables, or other functions as arguments and functions return a specific object, unlike predicates which return true or false values).</li> <li>Example of First Order Logic (FOL): </li> </ul> <p>What are the Constant symbols, Predicate symbols, and Function symbols from the image above?</p> <p> Constant Symbols:  - Richard and John (represents 2 specific individuals). - K (represents the crown as a specific object).  </p> <p> Predicate Symbols: - <code>Person(R)</code> -&gt; Richard is a person. (TRUE) - <code>Person(J)</code> -&gt; John is a person. (TRUE) - <code>King(J)</code> -&gt; John is a king. (TRUE) - <code>Brother(R,J)</code> -&gt; Richard is John's brother. (TRUE) - <code>OnHead(K, J)</code> -&gt; The crown (K) is on John's head. (TRUE) - <code>Crown(K)</code> -&gt; K is a crown. (TRUE) </p> <p> Function Symbols: - <code>LeftLeg(R)</code> -&gt; refers to Richard's left leg. - <code>LeftLeg(J)</code> -&gt; refers to John's left leg.  </p>"},{"location":"Chapter1/#predicate-symbols","title":"Predicate symbols","text":"<ul> <li>Predicate symbol represents a property or relation, for instance from the image above, brother, person, king.</li> <li>When we apply arguments to a predicate, it forms a predicate expression, for instance Brother(Richard, John)</li> <li>Predicate expression can be evaluated as either true or false in a given context, for instance Brother(Richard, John) will return true as the statement based on the image above is true.</li> <li>Arity of a predicate helps determine how many objects are involved in the property or relationship it describes:  </li> <li> <p>Unary Relations (Arity = 1) </p> <ul> <li>Takes one argument (property of a single object).  </li> <li>Examples:  </li> <li><code>Person(Richard)</code>: Richard is a person.  </li> <li><code>King(John)</code>: John is a king.  </li> <li><code>Crown(K)</code>: K is a crown.  </li> </ul> </li> <li> <p>Binary Relations (Arity = 2) </p> <ul> <li>Takes two arguments (relationships between 2 objects).  </li> <li>Examples:  </li> <li><code>Brother(Richard, John)</code>: Richard is the brother of John.  </li> <li><code>OnHead(K, John)</code>: Object K is on John's head.  </li> </ul> </li> <li> <p>Higher-Arity Relations </p> <ul> <li>Predicates can also have higher arities.  </li> <li>Example: Ternary relations with arity 3.  </li> <li><code>Between(x, y, z)</code>: Object y is between objects x and z.</li> </ul> </li> <li> <p>Examples (from previous image):</p> </li> </ul> Symbol Arity Example Brother 2 Brother(Richard, John) OnHead 2 OnHead(K, John) Person 1 Person(Richard) King 1 King(John) Crown 1 Crown(K)"},{"location":"Chapter1/#function-symbols","title":"Function symbols","text":"<ul> <li>Represents a mapping from one or more input objects (arguments) to an output object.</li> <li>Unlike predicates (which evaluate to true or false), functions will return objects as their output.</li> <li>In mathematical sense, a function maps an object to another object.</li> <li>Example:  </li> <li><code>LeftLeg(Richard)</code> = Richard's left leg  </li> <li>\u27e8Richard\u27e9 LeftLeg \u27f6 Richard\u2019s left leg  </li> <li>Function symbol <code>LeftLeg</code> is used to map a person (input) to their left leg (output).  </li> </ul> <p>Basically:   - Richard: Input (argument) to the function.   - LeftLeg: Function symbol.   - Richard's left leg: Output (result) of the function.</p> <ul> <li>Concept of arity also applies to function symbols:  </li> <li> <p>Unary function (arity 1): Takes one argument.  </p> <ul> <li>Example: <code>LeftLeg(Richard)</code> \u2192 Refers to Richard's left leg.  </li> </ul> </li> <li> <p>Binary function (arity 2): Takes two arguments.  </p> <ul> <li>Example: <code>Sum(x, y)</code> \u2192 Returns the sum of <code>x</code> and <code>y</code>.  </li> </ul> </li> <li> <p>Higher arities: Functions can also have arities greater than 2.  </p> <ul> <li>Example: A ternary function (arity 3) could be <code>Combine(x, y, z)</code> \u2192 Combines <code>x</code>, <code>y</code>, and <code>z</code> into a single result.</li> </ul> </li> </ul>"},{"location":"Chapter1/#universal-quantifier","title":"Universal quantifier, \u2200","text":"<ul> <li>It means for all or for every.</li> <li>Statement that follows applies to all members of the domain that is being considered.</li> <li>It is used to make general statements about all elements in a domain.</li> <li>Typically written as \u2200x, where x is a variable (expression after \u2200x applied to all possible values of x in the domain)</li> <li>Examples:  </li> <li> <p><code>\u2200x King(x) \u21d2 Person(x)</code> </p> <ul> <li>Translation: For all <code>x</code>, if <code>x</code> is a king, then <code>x</code> is a person.  </li> </ul> </li> <li> <p><code>\u2200x, y Brother(x, y) \u21d2 Person(x) \u2227 Person(y)</code> </p> <ul> <li>Translation: For all <code>x</code> and <code>y</code>, if <code>x</code> is the brother of <code>y</code>, then <code>x</code> is a person and <code>y</code> is a person.</li> </ul> </li> </ul>"},{"location":"Chapter1/#existential-quantifier","title":"Existential quantifier, \u2203","text":"<ul> <li>It means there exists or for some.</li> <li>There exists at least one member of the domain for which the statement that follows is true.</li> <li>It is used to make statements about the existence of at least one element in the domain that satisfies a given condition.</li> <li>Typically written as \u2203x, where x is a variable (expression after \u2203x only holds true for some of x)</li> <li>Examples:  <code>\u2203x Crown(x) \u2227 OnHead(x, John)</code> Translation: There exists an <code>x</code> such that <code>x</code> is a crown and x is on John's head .</li> </ul>"},{"location":"Chapter1/#nested-quantifier","title":"Nested quantifier","text":"<ul> <li>Can involve the same type of quantifier or different types.</li> <li>The order of quantifiers is crucial as it affects the meaning of the statement </li> <li>Examples:  </li> <li> <p><code>\u2200x\u2200y Brother(x, y) \u21d2 Sibling(x, y)</code> <code>\u2200x, y Brother(x, y) \u21d2 Sibling(x, y)</code> </p> <ul> <li>Translation: For all <code>x</code> and <code>y</code>, if <code>x</code> is the brother of <code>y</code>, then <code>x</code> is a sibling of <code>y</code>, basically brothers are siblings. </li> </ul> </li> <li> <p><code>\u2200x\u2200y Loves(x, y)</code> </p> <ul> <li>Translation: For all <code>x</code>, there exists a <code>y</code> such that <code>x</code> loves <code>y</code>, basically everybody loves somebody. </li> </ul> </li> <li> <p><code>\u2200y\u2200x Loves(x, y)</code> </p> <ul> <li>Translation: There exists a <code>y</code> such that for all <code>x</code>, <code>x</code> loves <code>y</code>, basically there is someone who is loved by everyone.</li> </ul> </li> </ul>"},{"location":"Chapter1/#de-morgans-laws","title":"De Morgan's Laws","text":"<ul> <li>Fundamental rules in logic that describe the relationship between conjuntion (\u2227) and disjunction (\u2228) , AND universal (\u2200) and existential (\u2203) quantifier under negation (\u00ac).</li> <li>Allow us to change from \u2227 to \u2228, vice versa AND from \u2200 to \u2203, vice versa. </li> <li>\u2227 and \u2228 :</li> <li> <p><code>\u00ac(P \u2227 Q) \u2261 \u00acP \u2228 \u00acQ</code></p> <ul> <li>Translation: Negation of (<code>P</code> and <code>Q</code>) is equivalent to not <code>P</code> or not <code>Q</code></li> </ul> </li> <li> <p><code>\u00ac(P \u2228 Q) \u2261 \u00acP \u2227 \u00acQ</code> </p> <ul> <li>Translation: Negation of (<code>P</code> or <code>Q</code>) is equivalent to not <code>P</code> and not <code>Q</code></li> </ul> </li> <li> <p><code>P \u2228 Q \u2261 \u00ac(\u00acP \u2227 \u00acQ)</code> </p> <ul> <li>Translation: <code>P</code> or <code>Q</code> is equivalent to not (not <code>P</code> and not <code>Q</code>) </li> </ul> </li> <li> <p><code>P \u2227 Q \u2261 \u00ac(\u00acP \u2228 \u00acQ)</code> </p> <ul> <li>Translation: <code>P</code> and <code>Q</code> is equivalent to not (not <code>P</code> or not <code>Q</code>)</li> </ul> </li> <li> <p>\u2200 and \u2203 :</p> </li> <li> <p><code>\u2200x \u00acP \u2261 \u00ac\u2203x P</code></p> <ul> <li>Translation: For all <code>x</code>, <code>P</code> is not true is equivalent to it is not the case that there exists an <code>x</code> for which P is true</li> </ul> </li> <li> <p><code>\u00ac\u2200x P \u2261 \u2203x \u00acP</code> </p> <ul> <li>Translation: It is not the case that for all <code>x</code>, <code>P</code> is true is equivalent to there exists an <code>x</code> for which <code>P</code> is not true</li> </ul> </li> <li> <p><code>\u2200x P \u2261 \u00ac\u2203x \u00acP</code> </p> <ul> <li>Translation: For all <code>x</code>, <code>P</code> is true is equivalent to there does not exist an <code>x</code> for which <code>P</code> is false.\"</li> </ul> </li> <li> <p><code>\u2203x P \u2261 \u00ac\u2200x \u00acP</code> </p> <ul> <li>Translation: There exists an <code>x</code> such that <code>P</code> is true is equivalent to it is not the case that for all <code>x</code>, <code>P</code> is not true.</li> </ul> </li> </ul>"},{"location":"Chapter1/#expert-systems","title":"Expert Systems","text":"<ul> <li>Programs that mimic decision-making and problem solving thought processes of human experts</li> <li>It uses production rules (IF-THEN) as knowledge representation</li> <li>Structure of expert system: </li> </ul> <ul> <li>Inference methods are methods used by the inference engine to reason through the knowledge base and derive conclusion</li> <li>The two inference methods are forward chaining and backward chaining</li> </ul>"},{"location":"Chapter1/#forward-chaining","title":"Forward Chaining","text":"<ul> <li>Data-driven reasoning</li> <li>known data/facts \u2192 rules \u2192 conclusion</li> <li>Basically, the system begins with the known facts in the working memory, it then apply the rules whose IF conditions match the known facts, when a rule fires, its THEN conclusion is added to the working memory as a new fact. This process repeats until no more rule can be applied or a specific goal has been reached.</li> <li>This method is useful when the goal is to explore all possible conclusions from the avalaible data or to generate a wide range of outcomes (explore all possible conclusions)</li> <li>Rule Interpreter: </li> </ul> <p>How the Algorithm Works:</p> <ol> <li> <p>Start from the first rule    The algorithm begins by checking the first rule in the rule list.</p> </li> <li> <p>Is this rule active?    a) If the rule is \"Active\", move to the next step.    b) If the rule is not \"Active\", proceed to the next rule.</p> </li> <li> <p>Fire the rule    If the rule is active, it is fired (executed).</p> </li> <li> <p>Remove the rule from the list    The fired rule is removed from the list to avoid reprocessing.</p> </li> <li> <p>End of rule list?    a) If all rules have been checked, proceed to the next step.    b) If there are more rules left, continue checking them.</p> </li> <li> <p>Any rule in this cycle was activated?    a) If at least one rule was activated, repeat the process from the first rule.    b) If no rules were activated, the algorithm ends.</p> </li> </ol> <p>Example (Please click this link): </p>"},{"location":"Chapter1/#conflict-resolution","title":"Conflict Resolution","text":"<ul> <li>When multiple rules can be fired at the same time, a conflict resolution strategy determines which rule to execute first.  </li> <li>Priorities are set based on:  </li> </ul> <p>a) Sequence of the rule list   - Assumes rules are arranged according to importance.   - Rules are prioritized based on their order in the list.  </p> <p>b) Specificity of the rule   - More specific rules (rules with more antecedents or conditions) are given higher priority.  </p> <p>c) Parameters in the environment   - Context or external conditions influence which rule is prioritized.   - Ensures the system adapts to real-life situations.  </p> <p>d) Recency of the rule being added   - Recently used rules are considered more significant as they have proven valuable.   - These rules are given priority for faster access.  </p> <p>e) Recency addition of the rule   - New rules are prioritized.  </p> <p>f) Redundancy   - Ignore rules that have already been fired.  </p> <p>Example: Traffic Light Rules Here\u2019s an example of rules and how conflicts might arise:</p> <pre><code>Rule 1    IF    traffic_light is green\n    THEN    action is go\n\nRule 2    IF    traffic_light is amber\n    THEN    action is slow-down\n\nRule 3    IF    traffic_light is amber\n    THEN    action is speed_up\n\nRule 4    IF    traffic_light is red\n    THEN    action is stop \n</code></pre> <p>For this case we will consider parameters in the environment for conflict resolution \u2757\u2757\u2757</p>"},{"location":"Chapter1/#backward-chaining","title":"Backward Chaining","text":"<ul> <li>Goal-driven reasoning</li> <li>goal/hypothesis \u2192 rules \u2192 data to support \u2192 rules \u2192 conclusion</li> <li>Basically, the system starts with a goal, then it looks for rules whose THEN (conclusion) match the goal. It then checks whether the IF conditions of those rules are satisfied by the facts in the working memory. If the conditions are not satisfied, the system treats them as sub-goals and repeats the process.</li> <li>This method is useful when the goal is specific, and the system needs to determine whether it is supported by the avalaible facts or when the system needs to answer a specific question or hypothesis. Basically, veryfying a specific goal or hypothesis.</li> <li>Rule Interpreter: </li> </ul> <p>How the Algorithm Works:</p> <ol> <li> <p>Identify the hypothesis or goal </p> </li> <li> <p>Check if there is a rule that establishes the goal    a) If yes, then proceed    b) If no, then check if the goal is a fact in the database  </p> </li> <li> <p>Check if any rule is active    a) If yes, add sub-goal to the database    b) If no, derive a new sub-goal from the rule's antecedent  </p> </li> <li> <p>Check for any preceding sub-goal    a) If yes, then use the preceding sub-goal as the new sub-goal (System takes the preceding sub-goal and treats it as the new hypothesis/goal to be proven and repeats the process)    b) If no, then the goal is proven </p> </li> </ol> <p>Sub-goal and How it works !?!?!:</p> <pre><code>Goal: Can I conclude Z? \n\nRule: Y \u2227 D \u2192 Z (to prove Z, I must prove Y and D)\n\nNow the new sub-goal is Y \n\nsystem will continue backward chaining to prove Y using another rule\n</code></pre> <p>Example (Please click this link):</p>"},{"location":"Chapter2/","title":"Fuzzy Logic and Fuzzy Inference Systems","text":""},{"location":"Chapter2/#fuzzy-logic-vs-booleanconventional-logic","title":"Fuzzy Logic vs Boolean(Conventional Logic)","text":""},{"location":"Chapter2/#boolean-or-conventional-logic","title":"Boolean or Conventional Logic","text":"<ul> <li>In boolean or conventional logic, a value is defined as the boundary to distinguish 'Tall' and 'Short'</li> <li>For example, <pre><code>Boundary is 180 cm for tall guy. Samuel is 179 cm therefore he is a short guy\n</code></pre></li> <li>In traditional boolean logic, variables may take on only true or false values (1 or 0)</li> </ul> Name Age Occupation John Doe 28 Software Engineer Jane Smith 34 Data Scientist Alice Johnson 22 Student Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> </li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p></p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>The HTML specification is maintained by the W3C.</p>"},{"location":"Mathematics/Calculus1/","title":"Basic Calculus","text":"<p>Python is a powerful tool for performing calculus operations, both symbolically (using libraries like SymPy) and numerically (using libraries like NumPy and SciPy).</p> <p>Info</p> <p>Symbolic Calculus with SymPy:</p> <p>SymPy is a Python library for symbolic mathematics that can perform calculus operations like differentiation, integration, limits, and series expansions. To install the SymPy module:</p> <pre><code>pip install sympy\n</code></pre> <p>Numerical Calculus with NumPy/SciPy:</p> <p>For numerical computations, we can use NumPy and SciPy. To install the modules:</p> <pre><code>pip install numpy scipy\n</code></pre>"},{"location":"Mathematics/Calculus1/#limits","title":"Limits","text":"<p>Limits are fundamental in calculus, and Python provides excellent tools for computing them both symbolically (using SymPy) and numerically (using NumPy/SciPy). Here's how to work with limits in Python:</p>"},{"location":"Mathematics/Calculus1/#hole-in-a-graph","title":"Hole in a graph","text":"<p>A hole in a graph occurs when a rational function has a common factor in its numerator and denominator that cancels out, creating a single point where the function is undefined. These are also called \"removable discontinuities\". For example, </p> <p>Example</p> <p>Given the equation:</p> \\[ y = \\frac{3(x - 2)}{(x - 2)} \\] <p>To solve this in python:</p> <pre><code>x = 2\nh = 0.00001\n\ny_right = (3*((x+h)-2))/((x+h) - 2)\ny_left = (3*((x-h)-2))/((x-h) - 2)\n\nif round(y_right) != round(y_left):\n    print(f\"Limit does not exist at x = {x}, as left hand limit does not equal to right hand limit!\")\n\nelse:\n    print(f\"Limit exist since both left hand limit and right hand limit are the same, {y_right} and {y_left}\")\n</code></pre> <p>Success</p> <p>You can also try this with other equations, x values and h values!!</p>"},{"location":"Python/BasicPython/","title":"Basic Python","text":""},{"location":"Python/BasicPython/#printing","title":"Printing","text":"<p>If you want to print or output something in python, there is different ways of doing it whether it is printing a statement or printing a defined variable(1):</p> <ol> <li>A variable is a named storage location that holds a value! \u270b</li> </ol> <p>Example</p> Printing a statementPrinting a variablePrinting a statement with variables <p><pre><code>print(\"Hello world\")\nprint(\"The world is amazing!\")\n</code></pre> Output:  <pre><code>Hello world\nThe world is amazing!\n</code></pre></p> <p><pre><code>name = \"Joshua\"\nage = 19\nprint(name)\nprint(age)\n</code></pre> Output:  <pre><code>Joshua \n19\n</code></pre></p> <p><pre><code>name = \"Joshua\"\nage = 19\nprint(f\"Hi there, I am {name} and I am {age} years old!\")\n</code></pre> Output:  <pre><code>Hi there, I am Joshua and I am 19 years old!\n</code></pre></p>"},{"location":"Python/BasicPython/#comments","title":"Comments","text":"<p>If you want to add notes or references for the block or line of code you have just written, you can use comments: </p> <p>Example</p> <p>To insert a comment simply use # follow by the comments u want to add! -  <pre><code>#To insert comments \nprint(\"Hello world\") #This will output a statement \nprint(\"This is an amazing world\") #This will output a statement \n</code></pre> Output: <pre><code>Hello world \nThis is an amazing world\n</code></pre> When the code is ran, comments will be ignored as it will not be part of the code! </p>"},{"location":"Python/BasicPython/#data-types","title":"Data types","text":"<p>There are four different data types in python, which are integers, strings, boolen &amp; float. If you declare a variable, a specific data type is assigned to it depending on the value of the variable:</p> <p>Example</p> StringIntegersFloatBoolean <p><pre><code>name = \"Mc Donalds\"\nprint(type(name))\n</code></pre> Output:  <pre><code>Kid\nHello Kid\nYour favourite food is Burger\n</code></pre></p> <p><pre><code>age = 18\nquantity = 9\nprint(f\"You are {age} years old\")\nprint(f\"You bought {quantity} items\")\n</code></pre> Output:  <pre><code>You are 18 years old \nYou bought 9 items \n</code></pre></p> <p><pre><code>price = 10.99\ngpa = 3.99\nprint(f\"The price of the item is ${price}\")\nprint(f\"Your GPA is {gpa}\")\n</code></pre> Output:  <pre><code>The price of the item is $10.99\nYour GPA is 3.99\n</code></pre></p> <p><pre><code>is_student = True\n\nif is_student:\n    print(\"You are a student!\")\nelse: \n    print(\"You are not a student!\")\n</code></pre> Output:  <pre><code>You are a student!\n</code></pre></p>"},{"location":"Python/BasicPython/#typecasting","title":"Typecasting","text":"<p>Typecasting converts a variable from one data type to another. To do this, simply equate the variable to itself and the data type you would like to change to: </p> <p>Example</p> <p>We can convert any variable from its original assigned data type to either string, integer, float or boolean. The way Python interprets string, integer and float is easy to understand and straightforward, but it is slightly different for booleans.    </p> Strings, integers and floatBoolean <p><pre><code>name = \"Mc Donalds\"\nage = 106\ngpa = 3.9\n\n#Print the intial data type of the variables:\nprint(type(name))\nprint(type(age))\nprint(type(gpa))\n\n#What happens after typecasting:\ngpa = int(gpa)\nprint(gpa)\n\nage = float(age)\nprint(age)\n\nage = str(age)\nprint(age)\nprint(type(age))\n</code></pre> Output: <pre><code>&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n3\n106.0\n106.0\n&lt;class 'str'&gt;\n</code></pre></p> <p><pre><code>is_student = True\nprint(type(is_student))\n</code></pre> Output: <pre><code>&lt;class 'bool'&gt;\n</code></pre></p> <p>For boolean with respect to string, if there is any character assigned to the string variable, then it will output True:</p> <p><pre><code>name = \"Mc Donalds\"\nname = bool(name) \nprint(name)\n</code></pre> Output: <pre><code>True\n</code></pre></p> <p>But if there is no character assigned to the string variable, then it will output False:</p> <p><pre><code>name = \"\"\nname = bool(name) \nprint(name)\n</code></pre> Output: <pre><code>False\n</code></pre></p> <p>Warning</p> <p>Different data types are used differently and can only be used specifically, for example arithmetic can only be used for float and integer and not strings:</p> StringsIntegersFloat <p><pre><code>age = 106\nage = str(age)\nage += \"1\"\nprint(age)\n</code></pre> Output: <pre><code>106.01\n</code></pre></p> <p><pre><code>age = 106\nage += 1\nprint(age)\n</code></pre> Output: <pre><code>107\n</code></pre></p> <p><pre><code>age = 106\nage = float(age)\nage += 1\nprint(age)\n</code></pre> Output: <pre><code>107.0\n</code></pre></p>"},{"location":"Python/BasicPython/#user-input","title":"User input","text":"<p>User input is a function that prompts the user to enter data into the Python program. Once the data have been entered, Python will accept the entered data as a string(1):</p> <ol> <li>This is always the case, even if you entered an integer number or floating point number \u2757</li> </ol> <p>Example</p> How it worksTypecasting user input <p><pre><code>name = input(\"What is your name?: \")\nprint(f\"Hello {name}!\")\n</code></pre> Output:  <pre><code>What is your name?: John \nHello John!\n</code></pre></p> <p>Since the original user input data type is always a string, if you would like to change the data type of that user input, simply enclose the input function with the type cast function:</p> <p><pre><code>age = int(input(\"How old are you?: \"))\nage += 1\nprint(f\"You are {age} years old!\")\n</code></pre> Output:  <pre><code>How old are you?: 30\nYou are 31 years old!\n</code></pre></p>"},{"location":"Python/BasicPython/#basic-arithmetic","title":"Basic Arithmetic","text":"<p>For basic arithmetic calculations, symbols such as (+), (-), (*), (/) can be used. Other operators include the modulus operator (%), where the remainder of the operand is the resultant and we also have power (**). There are many other useful functions such as round function, absolute value function, power exponent function, maximum function, minimum function and more. </p> <p>Arithmetic Operators</p> Addition (+)Subtraction (-)Multiplication (*)Division (/)Floor Division (//)Modulus / Remainder (%)Exponentiation (**) <pre><code>a = 5 + 3\nprint(a)  \n</code></pre> <p>Output:</p> <pre><code>8\n</code></pre> <pre><code>a = 10 - 4\nprint(a)  \n</code></pre> <p>Output:</p> <pre><code>6\n</code></pre> <pre><code>a = 6 * 7\nprint(a)  \n</code></pre> <p>Output:</p> <pre><code>42\n</code></pre> <pre><code>a = 10 / 2\nprint(a)  #(Always returns float)\n</code></pre> <p>Output:</p> <pre><code>5.0\n</code></pre> <pre><code>a = 10 // 3\nprint(a)  #(drops the decimal part)\n</code></pre> <p>Output:</p> <pre><code>3\n</code></pre> <pre><code>a = 10 % 3\nprint(a)  #(remainder of the division)\n</code></pre> <p>Output:</p> <pre><code>1\n</code></pre> <pre><code>a = 2 ** 3\nprint(a)  #(2 to the power of 3)\n</code></pre> <p>Output:</p> <pre><code>8\n</code></pre> <p>Built-in Functions</p> <code>round(number, [ndigits])</code><code>abs(number)</code><code>pow(x, y)</code><code>max(a, b, ...)</code><code>min(a, b, ...)</code> <p>Rounds a number to the nearest integer or to a given number of decimal places.</p> <pre><code>print(round(3.456))      # 3\nprint(round(3.456, 2))   # 3.46\n</code></pre> <p>Output:</p> <pre><code>3\n3.46\n</code></pre> <p>Returns the absolute (positive) value.</p> <pre><code>print(abs(-7))           # 7\n</code></pre> <p>Output:</p> <pre><code>7\n</code></pre> <p>Raises <code>x</code> to the power <code>y</code> (same as <code>x ** y</code>)</p> <pre><code>print(pow(2, 3))         # 8\n</code></pre> <p>Output:</p> <pre><code>8\n</code></pre> <p>Returns the largest of the arguments.</p> <pre><code>print(max(3, 9, 1))      # 9\n</code></pre> <p>Output:</p> <pre><code>9\n</code></pre> <p>Returns the smallest of the arguments.</p> <pre><code>print(min(3, 9, 1))      # 1\n</code></pre> <p>Output:</p> <pre><code>1\n</code></pre>"},{"location":"Python/Control_Flow/","title":"Control Flow","text":""},{"location":"Python/Control_Flow/#if-else-elif","title":"If-Else-Elif","text":"<p>For the program to make a decision on whether to execute the code or not, we can use the if, else if (elif) and else statements! If statements do some code (IF some condition is True), else it will do something else:</p> <p>Example</p> Integers and FloatStringBooleans <p><pre><code>age = int(input(\"Enter your age: \"))\n\nif age &gt;= 100:\n    print(\"You are too old to sign up!\")\n\nelif age &gt;= 18;\n    print(\"You are now signed up!\")\n\nelif age &lt;= 0:\n    print(\"You haven't been borned yet!)\n\nelse:\n    print(\"You are too young to sign up!\")\n</code></pre> Output (if the input = 100): <pre><code>Enter your age: 100\nYou are too old to sign up!\n</code></pre> Output (if the input = 30): <pre><code>Enter your age: 30\nYou are now signed up!\n</code></pre></p> <p><pre><code>response = input(\"Would you like some food (Y/N)?: \")\n\nif response == \"Y\":\n    print(\"Have some food!\")\n\nelse:\n    print(\"No food for you!\")\n</code></pre> Output (if the input = N):  <pre><code>Would you like some food (Y/N): N\nNo food for you!\n</code></pre></p> <p><pre><code>for_sale = True\n\nif for_sale:\n    print(\"This item is for sale!\")\n\nelse:\n    print(\"This item is not for sale!\")\n</code></pre> Output:  <pre><code>This item is for sale!\n</code></pre></p> <p>Warning</p> <p>The decision must be written in order from top to bottom, as Python will read the code line by line and will priotize the decision on top first!</p>"},{"location":"Python/Control_Flow/#logical-operators","title":"Logical Operators","text":"<p>For the program to evaluate multiple conditions at once, the operators of or, and, not can be used! Here's how can we use them: </p> <p>Notes</p> <p>Here is the general definition for the logical operators OR, AND, NOT:</p> Operator Description OR at least one condition must be True AND both conditions must be True NOT Inverts the condition, for example not False, not True <p>Example</p> ORANDNOT <p><pre><code>temp = 25\nis_raining = False\n\nif temp &gt; 35 or temp &lt; 0 or is_raining:\n    print(\"The outdoor event is cancelled\")\nelse:\n    print(\"The outdoor event is still scheduled\")\n</code></pre> Output: <pre><code>The outdoor event is still scheduled\n</code></pre></p> <p>Similary, if we change the is_raining boolean value : </p> <p><pre><code>temp = 25\nis_raining = True\n\nif temp &gt; 35 or temp &lt; 0 or is_raining:\n    print(\"The outdoor event is cancelled\")\nelse:\n    print(\"The outdoor event is still scheduled\")\n</code></pre> Output: <pre><code>The outdoor event is cancelled\n</code></pre></p> <p><pre><code>temp = 30\nis_sunny = True\n\nif temp &gt;= 28 and is_sunny:\n    print(\"It is HOT outside\")\n    print(\"It is SUNNY\")\n\nelif temp &lt;= 0 and is_sunny: \n    print(\"It is COLD outside\")\n    print(\"It is SUNNY\")\n</code></pre> Output:  <pre><code>It is HOT outside\nIt is SUNNY\n</code></pre></p> <p>Similary, if we change the temp value : </p> <p><pre><code>temp = -3\nis_sunny = True\n\nif temp &gt;= 28 and is_sunny:\n    print(\"It is HOT outside\")\n    print(\"It is SUNNY\")\n\nelif temp &lt;= 0 and is_sunny: \n    print(\"It is COLD outside\")\n    print(\"It is SUNNY\")\n</code></pre> Output:  <pre><code>It is COLD outside\nIt is SUNNY\n</code></pre></p> <p><pre><code>temp = -3\nis_sunny = False\n\nif temp &gt;= 28 and not is_sunny:\n    print(\"It is HOT outside\")\n    print(\"It is CLOUDY\")\n\nelif temp &lt;= 0 and not is_sunny: \n    print(\"It is COLD outside\")\n    print(\"It is CLOUDY\")\n</code></pre> Output:  <pre><code>It is COLD outside\nIt is CLOUDY\n</code></pre></p>"},{"location":"Python/Control_Flow/#conditional-expressions","title":"Conditional Expressions","text":"<p>This is also known as the ternary operator. It is a one-line shortcut for the if-else statement. So, instead of writing multiple lines of if-else codes, we can reduce the lines of codes with this expression! This allow Python to print or assign one of two values based on a condition:</p> <p>Notes</p> <p>The formula is: <pre><code>X if condition else Y\n</code></pre></p> <p>Example</p> <p><pre><code>num = 5 \nresult = \"Even\" if num % 2 == 0 else \"Odd\"\n\nprint(result)\n</code></pre> Output: <pre><code>Odd\n</code></pre></p>"},{"location":"Python/Control_Flow/#while-loops","title":"While Loops","text":"<p>Loops allow us to execute a block of code repeatedly as long as a specified condition is met. If we use a while loop, Python will execute some code indented within the while loop, WHILE some condition remains true:</p> <p>Example</p> 123 <p><pre><code>name = input(\"Enter your name: \")\n\nwhile name == \"\":\n    print(\"You did not enter your name!\")\n    name = input(\"Enter your name: \")\n\nprint(f\"Hello {name}\")   \n</code></pre> Output: <pre><code>Enter your name:\nYou did not enter your name!\nEnter your name:\nYou did not enter your name!\nEnter your name: John\nHello John\n</code></pre></p> <p><pre><code>age = int(input(\"Enter your age: \"))\n\nwhile age &lt; 0:\n    print(\"Age can't be negative\")\n    age = int(input(\"Enter your age: \"))\n\nprint(f\"You are {age} years old\")\n</code></pre> Output:  <pre><code>Enter your age: -1\nAge can't be negative\nEnter your age: 21\nYou are 21 years old\n</code></pre></p> <p><pre><code>food = input(\"Enter a food you like (q to quit): \")\n\nwhile not food == \"q\":\n    print(f\"You like {food}\")\n    food = input(\"Enter another food you like (q to quit): \")\n\nprint(\"bye\")\n</code></pre> Output:  <pre><code>Enter a food you like (q to quit): pizza\nYou like pizza\nEnter another food you like (q to quit): hotdog\nYou like hotdog\nEnter another food you like (q to quit): q\nbye\n</code></pre></p> <p>Warning</p> <p>Make sure the code has some way to exit out of the loop to prevent infinite loop!</p> <p>Notes</p> <p>Loops help automate repetitive tasks, making code more efficient and concise, but must be carefully used to prevent infinite loops!</p>"},{"location":"Python/Control_Flow/#for-loops","title":"For Loops","text":"<p>Besides while loops, there is also for loops. It is used when the number of iterations is known in advance. When a for loop is used, Python execute a block of code a fixed number of times. You can iterate over a range, string, sequence, etc:</p> <p>Example</p> Range FunctionString <p><pre><code>for x in range(1, 11):\n    print(x) \n</code></pre> Output: <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre></p> <p>What if we want it to print backwards:</p> <p><pre><code>for x in reversed(range(1, 11)):\n    print(x) \n\nprint(\"Happy New Year\")\n</code></pre> Output: <pre><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\nHappy New Year\n</code></pre></p> <p>What if we want to increase the step for counting x:</p> <p><pre><code>for x in range(1, 11, 2):\n    print(x) \n</code></pre> Output: <pre><code>1\n3\n5\n7\n9\n</code></pre></p> <p><pre><code>credit_card = \"1234-5678-9012-3456\"\n\nfor x in credit_card:\n    print(x)\n</code></pre> Output:  <pre><code>1\n2\n3\n4\n-\n5\n6\n7\n8\n-\n9\n0\n1\n2\n-\n3\n4\n5\n6\n</code></pre></p>"},{"location":"Python/Control_Flow/#continue-break","title":"Continue-Break","text":"<p><code>continue</code> and <code>break</code> are loop control statements used to modify the flow of loops (<code>for</code> and <code>while</code>):</p> <p>Example</p> breakcontinue <p>This statement stops the loop immediately and exits it, even if the loop condition is still true. Basically it is used to terminate a loop prematurely:</p> <p><pre><code>for x in range(1, 21):\n    if x == 13:\n        break\n    else:\n        print(x)\n</code></pre> Output: <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</code></pre></p> <p>This statement skips the current iteration and moves to the next one. Basically, it is used to skip specific values without exiting the loop entirely:</p> <p><pre><code>for x in range(1, 21):\n    if x == 13:\n        continue\n    else:\n        print(x)\n</code></pre> Output:  <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n14\n15\n16\n17\n18\n19\n20\n</code></pre></p>"},{"location":"Python/Control_Flow/#nested-loops","title":"Nested loops","text":"<p>Nested loop is a loop inside another loop. It is used when you need to perform repetitive tasks within repetitive tasks, such as working with multi-dimensional data, for example matrices, tables, grids, etc. Python reads nested loop on a specific format:</p> <p>Notes</p> <ul> <li>The outer loop runs once, triggering the inner loop to complete all its iterations.</li> <li>This repeats until the outer loop finishes.</li> <li>In simple words, inner loop completes all iterations for each outer loop iteration.</li> <li>Total runs = (Outer loop iterations) \u00d7 (Inner loop iterations)</li> <li>We can have different format of nested loops, for example while loop inside of a while loop, for loop inside of a for loop, while loop inside of a for loop, etc. </li> </ul> <p>Example</p> 123 <p><pre><code>for x in range(1, 10):\n    for y in range(1, 10):\n        print(y, end=\"\")\n    print()\n</code></pre> Output: <pre><code>123456789\n123456789\n123456789\n</code></pre></p> <p><pre><code>rows = int(input(\"Enter the # of rows: \"))\ncolumns = int(input(\"Enter the # of columns: \"))\nsymbol = input(\"Enter a symbol to use: \")\n\nfor x in range(rows):\n    for y in range(columns):\n        print(symbol, end=\"\")\n    print()\n</code></pre> Output:  <pre><code>Enter the # of rows: 4\nEnter the # of columns: 10\nEnter a symbol to use: $\n$$$$$$$$$$\n$$$$$$$$$$\n$$$$$$$$$$\n$$$$$$$$$$\n</code></pre></p> <p><pre><code>i = 1\nwhile &lt;= 3:\n    j = 1\n    while j &lt;= 2:\n        print(i, j)\n        j += 1\n    i += 1\n</code></pre> Output:  <pre><code>1 1\n1 2\n2 1\n2 2\n3 1\n3 2\n</code></pre></p> <p>Warning</p> <p>Avoid using too many nested loops (e.g., 3+ levels) as it can slow down your program and increase complexity!</p>"},{"location":"Python/Control_Flow/#match-case-statement","title":"Match-case statement","text":"<p><code>Match-case statement</code> provides pattern matching capabilities similar to switch-case statements in other languages. It is an alternative to using many <code>elif</code> statements. It executes some code if a value matches a <code>case</code>. </p> <p>key features</p> <ul> <li>More powerful than traditional switch-case statements</li> <li>Can match patterns, not just values</li> <li>Supports destructuring of data structures</li> <li>Can include conditions (guards) in patterns</li> <li>Works with custom classes</li> <li>The _ acts as a wildcard/catch-all pattern</li> </ul> <p>Basic Syntax</p> <pre><code>match subject:\n    case pattern1:\n        # handle pattern1\n    case pattern2:\n        # handle pattern2\n    case _:\n        # default case\n</code></pre> <p>Example</p> Simple value matchingPattern matching with typesMatching sequences and collectionsMatching dictionariesMatching with conditions (guards)Matching class objects <pre><code>def http_status(status):\n    match status:\n        case 200:\n            return \"OK\"\n        case 404:\n            return \"Not found\"\n        case 500:\n            return \"Server error\"\n        case _:\n            return \"Unknown status\"\n</code></pre> <pre><code>def check_type(value):\n    match value:\n        case int():\n            print(\"Got an integer\")\n        case str():\n            print(\"Got a string\")\n        case list():\n            print(\"Got a list\")\n        case _:\n            print(\"Unknown type\")\n</code></pre> <pre><code>def process_list(lst):\n    match lst:\n        case [first, second, *rest]:\n            print(f\"First: {first}, Second: {second}, Rest: {rest}\")\n        case [single]:\n            print(f\"Single element: {single}\")\n        case []:\n            print(\"Empty list\")\n</code></pre> <pre><code>def process_dict(d):\n    match d:\n        case {\"name\": name, \"age\": age}:\n            print(f\"Name: {name}, Age: {age}\")\n        case {\"user\": user}:\n            print(f\"User: {user}\")\n        case _:\n            print(\"Unknown dictionary format\")\n</code></pre> <pre><code>def check_number(n):\n    match n:\n        case x if x &lt; 0:\n            print(\"Negative\")\n        case 0:\n            print(\"Zero\")\n        case x if x &gt; 0:\n            print(\"Positive\")\n</code></pre> <pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef check_point(p):\n    match p:\n        case Point(x=0, y=0):\n            print(\"Origin\")\n        case Point(x=0, y=y):\n            print(f\"On Y axis at {y}\")\n        case Point(x=x, y=0):\n            print(f\"On X axis at {x}\")\n        case Point(x=x, y=y):\n            print(f\"Point at ({x}, {y})\")\n        case _:\n            print(\"Not a point\")\n</code></pre>"},{"location":"Python/Control_Flow/#function","title":"Function","text":"<p>A function in Python is a reusable block of code that performs a specific task. Functions help in organizing code, improving readability, and avoiding repetition.</p> <p>Info</p> <ul> <li>Use the <code>def</code> keyword to define a function.</li> <li>place <code>()</code> after the function name to invoke it. </li> <li>Parameters specify what input a function expects to receive and they allow functions to work with different input values each time they're called. There are different types of parameters which we will go through in the next section!</li> <li>The <code>return</code> statement is used in functions to specify the value that the function should output or \"give back\" when it's called and end a function.</li> <li>Not all functions need a return statement (functions without one return <code>None</code> by default)</li> </ul> <p>Example</p> Basic functionFunction with parameterFunction with multiple parametersFunction with return statement <p><pre><code>def happy_birthday():\n    print(\"Happy birthday to you!\")\n    print(\"You are old!\")\n    print(\"Happy birthday to you!\")\n    print()\n\nhappy_birthday()\nhappy_birthday()\nhappy_birthday()\n</code></pre> Output: <pre><code>Happy birthday to you!\nYou are old!\nHappy birthday to you!\n\nHappy birthday to you!\nYou are old!\nHappy birthday to you!\n\nHappy birthday to you!\nYou are old!\nHappy birthday to you!\n</code></pre></p> <p><pre><code>def happy_birthday(name):\n    print(f\"Happy birthday to {name}!\")\n    print(\"You are old!\")\n    print(\"Happy birthday to you!\")\n    print()\n\nhappy_birthday(\"John\")\nhappy_birthday(\"Josh\")\nhappy_birthday(\"Steve\")\n</code></pre> Output:  <pre><code>Happy birthday to John!\nYou are old!\nHappy birthday to you!\n\nHappy birthday to Josh!\nYou are old!\nHappy birthday to you!\n\nHappy birthday to Steve!\nYou are old!\nHappy birthday to you!\n</code></pre></p> <p><pre><code>def happy_birthday(name, age):\n    print(f\"Happy birthday to {name}!\")\n    print(f\"You are {age} years old!\")\n    print(\"Happy birthday to you!\")\n    print()\n\nhappy_birthday(\"John\", 20)\nhappy_birthday(\"Josh\", 30)\nhappy_birthday(\"Steve\", 40)\n</code></pre> Output:  <pre><code>Happy birthday to John!\nYou are 20 years old!\nHappy birthday to you!\n\nHappy birthday to Josh!\nYou are 30 years old!\nHappy birthday to you!\n\nHappy birthday to Steve!\nYou are 40 years old!\nHappy birthday to you!\n</code></pre></p> <p>Working with float/integers:</p> <p><pre><code>def add(x, y):\n    z = x + y\n    return z\n\ndef subtract(x, y):\n    z = x - y\n    return z\n\ndef multiply(x, y):\n    z = x * y\n    return z\n\ndef divide(x, y):\n    z = x / y\n    return z\n\nprint(add(1, 2))\nprint(subtract(1, 2))\nprint(multiply(1, 2))\nprint(divide(1, 2))\n</code></pre> Output:  <pre><code>3\n-1\n2\n0.5\n</code></pre></p> <p>Working with strings:</p> <p><pre><code>def create_name(first, last):\n    first = first.capitalize()\n    last = last.capitalize()\n    return first + \" \" + last\n\nfull_name = create_name(\"john\", \"cena\")\nprint(full_name)\n</code></pre> Output:  <pre><code>John Cena\n</code></pre></p>"},{"location":"Python/Control_Flow/#positional-arguments","title":"Positional Arguments","text":"<p>Positional arguments are the most basic type of arguments in Python functions. They are called \"positional\" because their meaning is determined by their position in the function call. Positional arguments must be passed in the exact order that the function parameters are defined.</p> <p>Key Characteristics</p> <ol> <li>Order matters: The first argument corresponds to the first parameter, second to second, etc.</li> <li>Required by default: You must provide values for all positional arguments unless they have default values.</li> </ol> <p>Example</p> <p><pre><code>def greet(name, greeting):\nprint(f\"{greeting}, {name}!\")\n\ngreet(\"Alice\", \"Hello\")  # Correct order\n# Output: Hello, Alice!\n\ngreet(\"Hello\", \"Alice\")  # Wrong order - logical error\n# Output: Alice, Hello!\n</code></pre> Output: <pre><code>Hello, Alice!\nAlice, Hello!\n</code></pre></p>"},{"location":"Python/Control_Flow/#default-arguments","title":"Default Arguments","text":"<p>Default arguments in Python allow you to specify default values for function parameters. If the caller doesn't provide a value for that parameter, the default value is used instead.</p> <p>Why Default Arguments?!?</p> <p>Default arguments make your functions more flexible, reduces number of arguments while maintaining backward compatibility with existing calls!</p> <p>Key Points About Default Arguments</p> <ol> <li> <p>Order matters: Parameters with default arguments must come after non-default parameters.</p> <pre><code># Correct\ndef func(a, b=1):\n    pass\n\n# Wrong\ndef func(a=1, b):\n    pass\n</code></pre> </li> <li> <p>Mutable defaults are dangerous: Default arguments are evaluated only once when the function is defined, not each time it's called. This can cause issues with mutable defaults.</p> <pre><code>def append_to(element, lst=[]):\n    lst.append(element)\n    return lst\n\nprint(append_to(1))  # [1]\nprint(append_to(2))  # [1, 2] - probably not what you wanted!\n</code></pre> <p>Better approach: <pre><code>def append_to(element, lst=None):\n    if lst is None:\n        lst = []\n    lst.append(element)\n    return lst\n</code></pre></p> </li> <li> <p>Default arguments can be any expression</p> </li> <li> <p>Overriding defaults: You can override defaults by passing a different value.</p> </li> </ol> <p>Example</p> 12.12.2 <p><pre><code>def net_price(list_price, discount=0, tax=0.05):\n    return list_price * (1 - discount) * (1 + tax)\n\nprint(net_price(500))         # using default arg.\nprint(net_price(500, 0.1))    # overriding defaults\nprint(net_price(500, 0.1, 0)) # overriding defaults\n</code></pre> Output: <pre><code>525.0\n472.5\n450.0\n</code></pre></p> <p><pre><code>import time \n\ndef count(end, start=0):\n    for x  in range(start, end+1):\n        print(x)\n        time.sleep(1) \n    print(\"Done!\")           \n\ncount(10)                       # using default arg.\n</code></pre> Output: <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nDone!\n</code></pre></p> <p><pre><code>import time \n\ndef count(end, start=0):\n    for x  in range(start, end+1):\n        print(x)\n        time.sleep(1) \n    print(\"Done!\")\n\ncount(30, 15)            # overriding defaults\n</code></pre> Output: <pre><code>15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nDone!\n</code></pre></p>"},{"location":"Python/Control_Flow/#keyword-arguments","title":"Keyword Arguments","text":"<p>Keyword arguments (also called named arguments) allow you to pass arguments to a function by explicitly specifying the parameter names and preceded by an identifier. Unlike positional arguments, the order doesn't matter when using keyword arguments.</p> <p>Key Features</p> <ol> <li>Clarity: Makes code more readable by showing what each argument represents</li> <li>Flexibility: Allows you to specify arguments in any order</li> <li>Default values: Often used with parameters that have default values</li> <li>Combination with positional args: Can be mixed with positional arguments (positional args must come first) </li> </ol> <pre><code>def register_user(name, email, phone=None, country=\"US\"):\n     print(f\"Registering {name} ({email}), Phone: {phone}, Country: {country}\")\n\n# Valid calls\nregister_user(\"Alice\", \"alice@example.com\")  # positional\nregister_user(\"Bob\", \"bob@example.com\", country=\"UK\")  # mixed\nregister_user(name=\"Charlie\", email=\"charlie@example.com\")  # keyword\n</code></pre> <p>Example</p> Self-WrittenBuilt-in <p>Example 1:</p> <p><pre><code>def hello(greeting, title, first, last):\n    print(f\"{greeting} {title}{first} {last}\")\n\nhello(greeting=\"Hello\", last=\"Squarepants\", first=\"Spongebob\", title=\"Mr.\")\n</code></pre> Output: <pre><code>Hello Mr.Spongebob Squarepants\n</code></pre></p> <p>Example 2:</p> <p><pre><code>def describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n\n# Using keyword arguments (order doesn't matter)\ndescribe_pet(pet_name=\"Whiskers\", animal_type=\"cat\")\ndescribe_pet(animal_type=\"dog\", pet_name=\"Rover\")\n</code></pre> Output: <pre><code>I have a cat named Whiskers.\nI have a dog named Rover.\n</code></pre></p> <p>End Keyword argument:</p> <p><pre><code>for x in range(1, 11):\n    print(x, end=\" \")        # end is a built in keyword arg. in print function\n</code></pre> Output: <pre><code>1 2 3 4 5 6 7 8 9 10 \n</code></pre></p> <p>Seperate Keyword argument:</p> <p><pre><code>    print(\"1\", \"2\", \"3\", \"4\", \"5\", sep=\"-\")        # sep is a built in keyword arg. in print function\n</code></pre> Output: <pre><code>1-2-3-4-5\n</code></pre></p> <p>Other Details</p> Forced keyword argumentsCommon Use Cases <p>You can force arguments to be keyword-only by using <code>*</code> in the parameter list:</p> <pre><code>def create_profile(name, *, age, occupation):\n    print(f\"{name}, {age}, {occupation}\")\n\ncreate_profile(\"Alice\", age=30, occupation=\"Engineer\")  # Valid\ncreate_profile(\"Bob\", 25, \"Teacher\")  # Error: age and occupation must be keyword args\n</code></pre> <ul> <li>Functions with many parameters:</li> </ul> <pre><code>def draw_rectangle(x, y, width, height, *, fill_color=\"black\", border_color=\"gray\", border_width=1):\n      # implementation\n</code></pre> <ul> <li>APIs where parameter names are meaningful:</li> </ul> <pre><code>requests.get(url, params=None, headers=None, timeout=None)\n</code></pre> <ul> <li>Functions where most parameters are optional:</li> </ul> <pre><code>def format_text(text, *, bold=False, italic=False, color=\"black\"):\n     # implementation\n</code></pre>"},{"location":"Python/Control_Flow/#arbitary-arguments-args-kwargs","title":"Arbitary Arguments (Args-Kwargs)","text":"<p>Python provides two ways to handle an arbitrary (variable) number of arguments in functions:</p> <p>Example</p> Arbitrary Positional Arguments (<code>*args</code>)Arbitrary Keyword Arguments (<code>**kwargs</code>)Combining Both <ul> <li>Allow you to pass multiple non-key arguments</li> <li>Collects extra positional arguments into a tuple</li> </ul> <p><pre><code>def sum_numbers(*args):\n    total = 0\n    for num in args:\n        total += num\n    return total\n\nprint(sum_numbers(1, 2, 3))        # Output: 6\nprint(sum_numbers(10, 20, 30, 40)) # Output: 100\n</code></pre> Output: <pre><code>6\n100\n</code></pre></p> <p>Features:</p> <ul> <li>The <code>*args</code> parameter must come after regular parameters</li> <li>You can name it anything (the <code>*</code> is what matters), but <code>args</code> is convention</li> <li>Useful when you don't know how many arguments might be passed</li> </ul> <ul> <li>Allow you to pass multiple keyword-arguments</li> <li>Collects extra keyword arguments into a dictionary</li> </ul> <p><pre><code>def print_user_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nprint_user_info(name=\"Alice\", age=25, occupation=\"Engineer\")\n# Output:\n# name: Alice\n# age: 25\n# occupation: Engineer\n</code></pre> Output: <pre><code>name: Alice\nage: 25\noccupation: Engineer\n</code></pre></p> <p>Features:</p> <ul> <li>The <code>**kwargs</code> parameter must come after all other parameters</li> <li>You can name it anything (the <code>**</code> is what matters), but <code>kwargs</code> is convention</li> <li>Useful for functions that need to handle named parameters flexibly</li> </ul> <p>Example 1:</p> <p><pre><code>def process_data(name, age, *scores, **properties):\n    print(f\"Name: {name}\")\n    print(f\"Age: {age}\")\n    print(f\"Scores: {scores}\")\n    print(f\"Properties: {properties}\")\n\nprocess_data(\"Bob\", 30, 85, 92, 78, department=\"IT\", role=\"Developer\")\n</code></pre> Output: <pre><code>Name: Bob\nAge: 30\nScores: (85, 92, 78)\nProperties: {'department': 'IT', 'role': 'Developer'}\n</code></pre></p> <p>Example 2:</p> <p><pre><code>def shipping_label(*args, **kwargs):\n    for arg in args:\n        print(arg,end=\" \")\n    print()\n\n    if \"apt\" in kwargs:\n        print(f\"{kwargs.get('street')} {kwargs.get('apt')}\")\n\n    elif \"PObox\" in kwargs:\n        print(f\"{kwargs.get('street')}\")\n        print(f\"{kwargs.get('PObox')}\")\n\n    else:\n        print(f\"{kwargs.get('street')}\")\n\n    print(f\"{kwargs.get('city')} {kwargs.get('state')}, {kwargs.get('zip')}\")\n\nshipping_label(\"Dr.\", \"Spongebob\", \"Squarepants\",\n               street=\"123 Fake St.\",\n               apt=\"#100\",\n               city=\"Detroit\",\n               state=\"MI\",\n               zip=\"54321\")\n</code></pre> Output: <pre><code>Dr Spongebob Squarepants\n123 Fake St. #100\nDetroit MI, 54321\n</code></pre></p>"},{"location":"Python/Control_Flow/#recursive-functions","title":"Recursive Functions","text":"<p>A recursive function is a function that calls itself in its definition. It's a powerful programming technique that can solve problems by breaking them down into smaller, similar subproblems.</p> <p>Key Characteristics</p> <ol> <li> <p>Base case: Should be defined in every recursive function, as having a base case helps to avoid infinite recursions.</p> </li> <li> <p>Recursive case: The function calls itself with a modified input that moves toward the base case. </p> </li> </ol> <p>Example</p> Factorial FunctionFibonacci Sequence <pre><code>def factorial(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))\n# call stack:  [{'input': 5}]\n# call stack:  [{'input': 4}]\n# call stack:  [{'input': 3}]\n# call stack:  [{'input': 2}]\n# base case reached! Num is 1.\n# 120\n</code></pre> <p>Output:</p> <pre><code>120\n</code></pre> <pre><code>def fibonacci(n):\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    # Recursive case\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(6))\n</code></pre> <p>Output:</p> <pre><code>8\n</code></pre> <p>Important Considerations</p> <ol> <li> <p>Termination Condition: Without a proper base case, the function will recurse infinitely</p> </li> <li> <p>Stack Overflow: Deep recursion may hit language recursion depth limits</p> </li> <li> <p>Memory Usage: Each recursive call adds to the call stack</p> </li> <li> <p>Performance: Some recursive solutions can be inefficient </p> </li> </ol>"},{"location":"Python/Control_Flow/#scope-resolution","title":"Scope Resolution","text":"<p>Scope resolution in Python determines how variables are looked up and where they can be accessed. Python follows the LEGB rule for name resolution:</p> <p>LEGB Rule (Order of Scope Resolution)</p> <ol> <li> <p>L (Local): Names defined inside the current function</p> </li> <li> <p>E (Enclosing): Names in the local scope of enclosing functions (for nested functions)</p> </li> <li> <p>G (Global): Names defined at the module level</p> </li> <li> <p>B (Built-in): Names built into Python (eg. value of PI in math module)</p> </li> </ol> <p>Example of LEGB</p> LocalEnclosing ScopeGlobal ScopeBuilt-in Scope <pre><code>def my_func():\nx = 10  # Local variable\nprint(x)\n</code></pre> <pre><code>def outer():\n    x = 10  # Enclosing scope variable\n\n    def inner():\n        print(x)  # Accesses x from enclosing scope\n\n    inner()\n</code></pre> <pre><code>x = 10  # Global variable\n\ndef my_func():\n    print(x)  # Accesses global x\n</code></pre> <pre><code>def my_func():\n    print(len([1, 2, 3]))  # len is a built-in function\n</code></pre> <p>Modifying Scope Behavior</p> GlobalNonlocal <p>Modify a global variable from a local scope</p> <pre><code>x = 10\n\ndef my_func():\n    global x\n    x = 20  # Modifies the global x\n    print(x)\n\nmy_func()\n</code></pre> <p>Output:</p> <pre><code>20\n</code></pre> <p>Modify a variable from an enclosing (non-global) scope</p> <pre><code>def outer():\n    x = 10\n\n    def inner():\n        nonlocal x\n        x = 20  # Modifies outer's x\n\n    inner()\n    print(x)  # Prints 20\n\nouter()\n</code></pre> <p>Output:</p> <pre><code>20\n</code></pre>"},{"location":"Python/Control_Flow/#if-name-main","title":"If name == \"main\"","text":"<p>This Python idiom checks if a script is being run directly (rather than imported as a module). This also prevents the code from running when the file is imported as a module, while allowing it to run when executed directly. In simple words, sometimes we want the functionality of a program without executing the main body of code, for example a python library (math module).</p> <p>Key Points</p> <ol> <li> <p>Double equals (==): You used a single equals (=), which is assignment. You need the comparison operator ==.</p> </li> <li> <p>Double underscores: \"name\" has two underscores on each side.</p> </li> <li> <p>Quotes around \"main\": The string should be in quotes (either single or double).</p> </li> </ol> <p>How It Works</p> <ul> <li> <p>When a Python script runs directly, its <code>__name__</code> is set to <code>\"__main__\"</code></p> </li> <li> <p>When imported as a module, <code>__name__</code> is set to the module's name</p> </li> </ul> <p>Example</p> Common UsageMultiple Modules (without the idiom)Multiple Modules (with the idiom) <pre><code>def main():\n    # Your main program logic here\n    print(\"This is the main function\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>If we don't use <code>if __name__ == \"__main__\"</code> -</p> <p>script1:</p> <pre><code>def favourite_food(food):\n    print(f\"Your favourite food is {food}\")\n\nprint(\"This is script 1\")\nfavourite_food(\"pizza\")\nprint(\"Goodbye!\")\n</code></pre> <p>script2:</p> <pre><code>from script1 import *\n</code></pre> <p>Now we run script2, the output will show:</p> <pre><code>This is script1\nYour favourite food is pizza \nGoodbye!\n</code></pre> <p>If we use <code>if __name__ == \"__main__\"</code> -</p> <p>script1:</p> <pre><code>def favourite_food(food):\n    print(f\"Your favourite food is {food}\")\n\ndef main():\n    print(\"This is script 1\")\n    favourite_food(\"pizza\")\n    print(\"Goodbye!\")\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>script2:</p> <pre><code>from script1 import *\n\ndef favourite_drink(drink):\n    print(f\"Your favourite drink is {drink}\")\n\nprint(\"This is script2\")\nfavourite_food(\"sushi\")\nfavourite_drink(\"coffee\")\nprint(\"Goodbye!\")\n</code></pre> <p>Now we run script2, the output will show:</p> <pre><code>This is script2\nYour favourite food is sushi\nYour favourite drink is coffee \nGoodbye!\n</code></pre> <p>Success</p> <p>It is good practice to include this idiom of <code>if __name__ == \"__main__</code>, as it makes your code more modular, helps with readability, leaves no global variable and avoid any unintended execution !</p>"},{"location":"Python/Control_Flow/#lambda-function","title":"Lambda function","text":"<p>A lambda function (also called an anonymous function) is a small, unnamed function defined using the <code>lambda</code> keyword in Python. It can take any number of arguments but must consist of a single expression. Unlike regular functions defined with <code>def</code>, lambda functions don\u2019t have a name and are usually used in situations where you need a simple function for a short period of time.</p> <p>Key Characteristics</p> <ol> <li> <p>Anonymous: It doesn\u2019t have a name (unless assigned to a variable).</p> </li> <li> <p>Single Expression: Can only contain one expression (no statements like if, for, etc.).</p> </li> <li> <p>Inline Usage: Often used where a short function is needed temporarily.</p> </li> <li> <p>It is also commonly used as arguments to higher-order functions such as <code>map()</code>, <code>filter()</code>, and <code>sorted()</code>.</p> </li> </ol> <p>Basic Syntax</p> <pre><code>lambda [arguments]: [expression] \n</code></pre> <p>Example</p> Basic Lambda FunctionLambda with <code>map()</code>Lambda with <code>filter()</code>Lambda with <code>sorted()</code> <pre><code>add = lambda x, y: x + y\nprint(add(3, 5))  # Output: 8\n</code></pre> <p>The <code>map()</code> function applies the given lambda function to each item in a list.</p> <pre><code>numbers = [1, 2, 3, 4, 5] \n\nsquared = list(map(lambda x: x ** 2, numbers)) \n\nprint(squared)  # Output: [1, 4, 9, 16, 25] \n</code></pre> <p>The lambda function square each number in the original list. The <code>map()</code> function applies this lambda to each element, resulting in a new list where every number is squared. </p> <p>The <code>filter()</code> function creates a new list of elements for which the given lambda function returns True.</p> <pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers)) \n\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10] \n</code></pre> <p>The lambda function checks if a number is even. The <code>filter()</code> function uses this lambda to keep only the even numbers from the original list, creating a new list containing only even numbers. </p> <p>The <code>sorted()</code> function can use a lambda function as a key for custom sorting.</p> <pre><code>students = [('Alice', 'A', 15), ('Bob', 'B', 12), ('Charlie', 'A', 20)] \n\nsorted_students = sorted(students, key=lambda x: x[2]) \n\nprint(sorted_students) \n\n# Output: [('Bob', 'B', 12), ('Alice', 'A', 15), ('Charlie', 'A', 20)] \n</code></pre> <p>The lambda function is used as the key for sorting. It tells the <code>sorted()</code> function to use the third element (index 2) of each tuple for comparison. As a result, the list of students is sorted based on their age (the third element in each tuple).</p> <p>Best Practices</p> <p>Use lambda functions when:</p> <ul> <li>You need a simple function for a short period.</li> <li>You\u2019re passing a simple function as an argument to higher-order functions.</li> </ul> <p>Avoid lambda functions when:</p> <ul> <li>The operation is complex or requires multiple expressions.</li> <li>You need to reuse the function multiple times (define a regular function instead).</li> </ul>"},{"location":"Python/Data_Structures/","title":"Data Structures","text":""},{"location":"Python/Data_Structures/#string-methods","title":"String methods","text":"<p>Python provides many built-in methods for string manupulation. Here are some of the most commonly used string methods:</p> <p>Lists of string methods</p> Case Conversion MethodsSearch and Replace MethodsValidation MethodsFormatting MethodsSplitting and JoiningLength finding <ul> <li><code>str.lower()</code> - returns a lowercase version of the string</li> <li><code>str.upper()</code> - returns an uppercase version of the string</li> <li><code>str.capitalize()</code> - capitalizes the first character</li> <li><code>str.title()</code> - capitalizes the first letter of each word</li> <li><code>str.swapcase()</code> - swaps uppercase to lowercase and vice versa</li> </ul> <ul> <li><code>str.find(sub)</code> - returns lowest index where sub is found</li> <li><code>str.rfind(sub)</code> - returns highest index where sub is found</li> <li><code>str.index(sub)</code> - ike find() but raises ValueError if not found</li> <li><code>str.rindex(sub)</code> - like rfind() but raises ValueError if not found</li> <li><code>str.replace(old, new)</code> - replaces occurrences of old with new</li> <li><code>str.count(sub)</code> - counts occurrences of substring</li> </ul> <ul> <li><code>str.isalpha()</code> - checks if all characters are alphabetic</li> <li><code>str.isdigit()</code> - checks if all characters are digits</li> <li><code>str.isalnum()</code> - checks if alphanumeric characters only</li> <li><code>str.isspace()</code> - checks if all characters are whitespace</li> <li><code>str.islower()</code> - checks if all characters are lowercase</li> <li><code>str.isupper()</code> - checks if all characters are uppercase</li> <li><code>str.startswith(prefix)</code> - checks if string starts with prefix</li> <li><code>str.endswith(suffix)</code> - checks if string ends with suffix</li> </ul> <ul> <li><code>str.strip()</code> - removes leading/trailing whitespace</li> <li><code>str.lstrip()</code> - removes leading whitespace</li> <li><code>str.rstrip()</code> - removes trailing whitespace</li> <li><code>str.center(width)</code> - centers string in given width</li> <li><code>str.ljust(width)</code> - left-justifies string in given width</li> <li><code>str.rjust(width)</code> - right-justifies string in given width</li> <li><code>str.zfill(width)</code> - pads with zeros on left to fill width</li> <li><code>str.expandtabs(tabsize)</code> - replaces tabs with spaces</li> </ul> <ul> <li><code>str.split(sep)</code> - splits string by separator into list</li> <li><code>str.rsplit(sep)</code> - splits from right side</li> <li><code>str.splitlines()</code> - splits at line boundaries</li> <li><code>str.join(iterable)</code> - joins elements with string as separator</li> <li><code>str.partition(sep)</code> - splits into 3 parts around first sep</li> <li><code>str.rpartition(sep)</code> - splits into 3 parts around last sep</li> </ul> <ul> <li><code>len(variable)</code> - returns the length of the string variable</li> </ul> <p>Example</p> 1234567 <p><pre><code>name = \"John\"\nresult = len(name)\nprint(result)\n</code></pre> Output: <pre><code>4\n</code></pre></p> <p><pre><code>name = \"John\"\nresult = name.find(\"o\")\nprint(result)\n</code></pre> Output: <pre><code>1\n</code></pre></p> <p><pre><code>name = \"John Cena\"\nresult = name.rfind(\"n\")\nprint(result)\n</code></pre> Output: <pre><code>7\n</code></pre></p> <p><pre><code>name = \"John\"\nresult = name.upper()\nprint(result)\n</code></pre> Output: <pre><code>JOHN\n</code></pre></p> <p><pre><code>name = \"John234\"\nresult = name.isdigit()\nprint(result)\n</code></pre> Output: <pre><code>False\n</code></pre> <pre><code>name = \"123\"\nresult = name.isdigit()\nprint(result)\n</code></pre> Output: <pre><code>True\n</code></pre></p> <p><pre><code>name = \"John\"\nresult = name.isalpha()\nprint(result)\n</code></pre> Output: <pre><code>True\n</code></pre></p> <p><pre><code>phone_number = \"012-3456789\"\nresult = phone_number.replace(\"-\", \" \")\nprint(result)\n</code></pre> Output: <pre><code>012 3456789\n</code></pre></p> <p>To view more string methods</p> Direct from PythonFrom website <pre><code>print(help(str))\n</code></pre> <p>Full reference at Python Docs</p>"},{"location":"Python/Data_Structures/#string-indexing","title":"String Indexing","text":"<p>This allows us to access individual characters or elements in a string or sequence using their position and indexing operator:</p> <p>Info</p> <p>Python supports both positive indexing (left to right) and negative indexing (right to left).</p> <p>Example</p> Positive IndexingNegative IndexingString Slicing (Extracting Substrings) <p>Basically, it starts at <code>0</code> for the first character and increases by <code>1</code> for each subsequent character:</p> <p><pre><code>text = \"Python\"\nprint(text[0])\nprint(text[1])\nprint(text[5])\n</code></pre> Output: <pre><code>P\ny\nn\n</code></pre></p> <p>Basically, it starts at <code>-1</code> for the last character and decreases by <code>1</code> for each preceding character:</p> <p><pre><code>text = \"Python\"\nprint(text[-1])\nprint(text[-2])\nprint(text[-6])\n</code></pre> Output: <pre><code>n\no\nP\n</code></pre></p> <p>You can extract a substring using the syntax: <code>string[start:end:step]</code></p> <ul> <li><code>start</code> \u2192 Index to begin (inclusive, default <code>0</code>)</li> <li><code>end</code> \u2192 Index to stop (exclusive, default <code>len(string)</code>)</li> <li><code>step</code> \u2192 Step size (default <code>1</code>)</li> </ul> <p><pre><code>text = \"Python Programming\"\n\n# Get first 6 characters\nprint(text[0:6])\n\n# Get from index 7 to end\nprint(text[7:])\n\n# Get every 2nd character\nprint(text[::2])\n\n# Reverse a string\nprint(text[::-1])\n</code></pre> Output: <pre><code>Python\nProgramming\nPto rgamn\ngnimmargorP nohtyP\n</code></pre></p>"},{"location":"Python/Data_Structures/#format-specifiers","title":"Format Specifiers","text":"<p>Format specifiers in Python are used to control how values are formatted based on waht flags are inserted. They allow you to specify things like alignment, padding, precision, and type representation. Python provides several ways to use format specifiers:</p> <p>Common Format Specifier</p> <p>The general syntax is:</p> <p><code>[fill][align][sign][#][0][width][grouping][.precision][type]</code></p> <p>where,</p> <ul> <li>Fill: Character to pad with (default is space)</li> <li>Align: <code>&lt;</code> (left), <code>&gt;</code> (right), <code>^</code> (center), <code>=</code>(pad after sign)</li> <li>Sign: <code>+</code> (show sign for both + and -), <code>-</code> (only for -), space (leading space for +)</li> <li>Width: Minimum field width</li> <li>Precision: For floating point, number of digits after decimal</li> <li>Type:<ul> <li>d, i: integer</li> <li>f, F: float</li> <li>e, E: scientific notation</li> <li>g, G: general format (auto switches between f and e)</li> <li>%: percentage</li> <li>x, X: hexadecimal</li> <li>o: octal</li> <li>b: binary</li> <li>c: character (unicode code point)</li> </ul> </li> </ul> <p>Example</p> <p>Format specifiers provide powerful control over how values are displayed in Python strings.</p> Number formattingFloat formattingString formatting <p><pre><code>print(f\"{1234:10d}\")      # '      1234' (right-aligned, width 10)\nprint(f\"{1234:&lt;10d}\")     # '1234      ' (left-aligned)\nprint(f\"{1234:^10d}\")     # '   1234   ' (centered)\nprint(f\"{1234:010d}\")     # '0000001234' (zero-padded)\nprint(f\"{1234:,d}\")       # '1,234' (with thousands separator)\nprint(f\"Binary: {10:b}\")          # Output: Binary: 1010\n</code></pre> Output: <pre><code>      1234\n1234      \n   1234   \n0000001234\n1,234\n1010\n</code></pre></p> <p><pre><code>print(f\"{3.14159:.2f}\")   # '3.14' (2 decimal places)\nprint(f\"{3.14159:10.2f}\") # '      3.14' (width 10, 2 decimals)\nprint(f\"{3.14159:e}\")     # '3.141590e+00' (scientific notation)\n</code></pre> Output: <pre><code>3.14\n      3.14\n3.141590e+00\n</code></pre></p> <p><pre><code>print(f\"{'hello':10s}\")   # 'hello     ' (left-aligned, width 10)\nprint(f\"{'hello':&gt;10s}\")  # '     hello' (right-aligned)\nprint(f\"{'hello':^10s}\")  # '  hello   ' (centered)\nprint(f\"{'hello':.2s}\")   # 'he' (truncated to 2 chars)\n</code></pre> Output: <pre><code>hello     \n     hello\n  hello   \nhe\n</code></pre></p>"},{"location":"Python/Data_Structures/#lists-sets-and-tuples","title":"Lists, sets and tuples","text":"<p>Python offers several built-in collection (1) types, each with different characteristics. Here's a comparison of lists, sets, and tuples:</p> <ol> <li>Collection: a single \"variable\" used to store multiple values </li> </ol> <p>Comparisons with examples</p> ListsTuplesSets <ul> <li>Mutable (can be changed after creation)</li> <li>Ordered (maintains insertion order)</li> <li>Allows duplicates</li> <li>Syntax: <code>[]</code> or <code>list()</code></li> </ul> <p><pre><code># Creating a list\nfruits = ['apple', 'banana', 'cherry']\nnumbers = list(range(5))\n\n# Common operations\nfruits.append('orange')       # Add item\nfruits.remove('banana')       # Remove item\nfruits[1] = 'blueberry'       # Modify item\nprint(fruits[0])              # Access item\nprint(fruits)                 # Access list\nprint(fruits[0:1])            # Print list within a range\nprint(fruits[::2])            # Print list with a step\nprint(fruits[::-1])           # Print list backwards\n\nprint()\n\n# Iterate over a for loop (To print every element)\nfor fruit in fruits:\n    print(fruit)\n</code></pre> Output: <pre><code>apple\n['apple', 'blueberry', 'orange']\n['apple', 'blueberry']\n['apple', 'orange']\n['orange', 'blueberry', 'apple']\n\napple\nblueberry\norange\n</code></pre></p> <ul> <li>Immutable (cannot be changed after creation)</li> <li>Ordered (maintains insertion order)</li> <li>Allows duplicates</li> <li>Syntax: <code>()</code> or <code>tuple()</code></li> </ul> <p><pre><code># Creating a tuple\ncolors = ('red', 'green', 'blue')\ncoordinates = tuple([1, 2, 3])\n\n# Common operations\nprint(colors[1])              # Access item (green)\nprint(colors.count('red'))    # Count occurrences\nprint(len(colors))            # Get length\nprint('red' in colors)        # Find if element exists\nprint(colors.index(\"blue\"))   # Find index for element\n\nprint()\n\n# Iterate over a for loop (To print every element)\nfor color in colors:\n    print(color)\n\n# Tuples are often used for fixed data (Example Scenario)\npoint = (3, 4)  # x, y coordinates\n</code></pre> Output: <pre><code>green\n1\n3\nTrue\n2\n\nred \ngreen \nblue\n</code></pre></p> <ul> <li>Mutable (can add/remove items)</li> <li>Unordered (no index positions)</li> <li>Allows duplicates (automatically removes duplicates)</li> <li>Syntax: <code>{}</code> or <code>set()</code></li> </ul> <p><pre><code># Creating a set\nunique_numbers = {1, 2, 3, 3, 4}  # {1, 2, 3, 4}\nletters = set('hello')            # {'h', 'e', 'l', 'o'}\n\n# Common operations\nunique_numbers.add(5)      # Add item\nunique_numbers.remove(2)   # Remove item\nletters.add('p')           # Add item\nletters.remove('e')   # Remove item\n\nprint(unique_numbers)\nprint(letters)\n</code></pre> Output: <pre><code>{1, 3, 4, 5}\n{'p', 'l', 'h', 'o'}\n</code></pre></p> <p>Tip</p> <p>Key Differences:</p> Feature List Tuple Set Mutability Mutable Immutable Mutable Order Ordered Ordered Unordered Duplicates Allowed Allowed Not allowed Syntax <code>[]</code> <code>()</code> <code>{}</code> Use Case Dynamic data Fixed data Unique items <p>When to use each collection cases: </p> <ul> <li>Use lists when you need an ordered collection that may change</li> <li>Use tuples for fixed data that shouldn't change (like coordinates)</li> <li>Use sets when you need to ensure uniqueness or perform set operations</li> </ul> <p>To access more methods and attributes avalaible to collection:</p> <pre><code>fruits = ['apple', 'orange', 'banana', 'coconut']\nprint(dir(fruits))                        # Lists\nprint(help(fruits))                       # Description \n</code></pre> <p>Additional Information</p> <p>All three (list, tuple and set) support iteration and can be converted between each other:</p> <pre><code>my_list = [1, 2, 3]\nmy_tuple = tuple(my_list)\nmy_set = set(my_list)\n</code></pre>"},{"location":"Python/Data_Structures/#2d-collections","title":"2D Collections","text":"<p>In Python, you can create two-dimensional (2D) collections using various data structures. Here are the common ways to implement 2D collections:</p> <p>Info</p> <p>2D collections are fundamental for many applications like game boards, image processing, spreadsheets, and more. You can have different forms of 2D collection with lists, tuples and sets, for example lists made of lists, lists made of tuples, etc. Choose the implementation that best fits your specific use case.</p> <p>Example</p> 123 <p><pre><code>fruits = [\"apple\", \"orange\", \"banana\", \"coconut\"]\nvegetables = [\"celery\", \"carrots\", \"potatoes\"]\nmeats = [\"chicken\", \"fish\", \"turkey\"]\n\ngroceries = [fruits, vegetables, meats]\n\n# print the whole 2D collection\nprint(groceries)\n\nprint()\n\n# print an entire row\nprint(groceries[0])\n\nprint()\n\n# print elements of the 2D collection\nprint(groceries[0][0])\n\nprint()\n\n# Single loop printing (iterating the rows)\nfor collection in groceries:\n    print(collection)\n\nprint()\n\n# Nested loop printing (iterating the elements)\nfor collection in groceries:\n    for food in collection:\n        print(food, end=\" \")\n    print()\n</code></pre> Output: <pre><code>[['apple', 'orange', 'banana', 'coconut'], ['celery', 'carrots', 'potatoes'], ['chicken', 'fish', 'turkey']]\n\n['apple', 'orange', 'banana', 'coconut']\n\napple\n\n['apple', 'orange', 'banana', 'coconut']\n['celery', 'carrots', 'potatoes']\n['chicken', 'fish', 'turkey']\n\napple orange banana coconut\ncelery carrots potatoes\nchicken fish coconut\n</code></pre></p> <p>Another way of declaring it:</p> <pre><code>groceries = [[\"apple\", \"orange\", \"banana\", \"coconut\"],\n             [\"celery\", \"carrots\", \"potatoes\"],    \n             [\"chicken\", \"fish\", \"turkey\"]]\n</code></pre> <p><pre><code>num_pad =((1, 2, 3),\n          (4, 5, 6),\n          (7, 8, 9),\n          (\"*\", 0, \"#\"))\n\nfor row in num_pad:\n    for num in row:\n        print(num, end=\" \")\n    print()\n</code></pre> Output: <pre><code>1 2 3\n4 5 6\n7 8 9\n* 0 #\n</code></pre></p> <p><pre><code># Creating a 2D list (matrix)\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# Accessing elements\nprint(matrix[0][1])  # Output: 2 (first row, second column)\n\n# Modifying elements\nmatrix[1][2] = 10  # Changes 6 to 10\n\n# Iterating through the matrix\nfor row in matrix:\n    for element in row:\n        print(element, end=' ')\n    print()\n</code></pre> Output: <pre><code>2\n1 2 3\n4 5 10\n7 8 9\n</code></pre></p>"},{"location":"Python/Data_Structures/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries are one of Python's most powerful and commonly used data structures. They store data as key-value pairs, providing fast lookups and flexible data organization. They are mutable, unordered and do not allow duplicates. The keys of the dictionaries must be hashable (strings, numbers, tuples, but not lists). There is a specific way of defining dictionaries in Python: </p> <p>Common Use Cases</p> <ol> <li>Counting occurrences (word frequency, etc.)</li> <li>Fast lookups by key (much faster than lists for large datasets)</li> <li>Structured data (like JSON objects)</li> <li>Memoization (caching function results)</li> <li>Implementing graphs (adjacency lists)</li> </ol> <p>Example</p> Creating DictionariesAccessing ValuesAdding/Updating ItemsRemoving ItemsOther Dictionary MethodsDefault DictionariesOther Examples (in full) <pre><code># Empty dictionary\nempty_dict = {}\n\n# Dictionary with initial values\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Using dict() constructor\nperson = dict(name=\"Alice\", age=30, city=\"New York\")\n\n# Dictionary with mixed key types\nmixed_dict = {\n    \"name\": \"Bob\",\n    42: \"The Answer\",\n    (1, 2): \"Tuple as key\"\n}\n</code></pre> <pre><code># Using square bracket notation\nprint(person[\"name\"])  # Output: Alice\n\n# Using get() method (safer, returns None if key doesn't exist)\nprint(person.get(\"age\"))  # Output: 30\nprint(person.get(\"country\"))  # Output: None\nprint(person.get(\"country\", \"USA\"))  # Default value if key doesn't exist which in this case is USA\n</code></pre> <pre><code># Adding new key-value pair\nperson[\"occupation\"] = \"Engineer\"\n\n# Updating existing value\nperson[\"age\"] = 31\n\n# Update multiple items at once\nperson.update({\"age\": 32, \"country\": \"USA\"})\n</code></pre> <pre><code># Using del\ndel person[\"city\"]\n\n# Using pop() - removes and returns value\nage = person.pop(\"age\")\n\n# Using popitem() - removes and returns last inserted item (Python 3.7+)\nlast_item = person.popitem()\n\n# Clear all items\nperson.clear()\n</code></pre> <pre><code># Get all keys\nkeys = person.keys()  # Returns a view object\n\n# Get all values\nvalues = person.values()  # Returns a view object\n\n# Get all key-value pairs\nitems = person.items()  # Returns a view object\n\n# Check if key exists\nif \"name\" in person:\n    print(\"Name exists\")\n\n# Dictionary length\nnum_items = len(person)\n</code></pre> <pre><code>from collections import defaultdict\n\n# Automatically initializes missing keys\nword_counts = defaultdict(int)\nfor word in [\"apple\", \"banana\", \"apple\"]:\n    word_counts[word] += 1\n# Result: defaultdict(&lt;class 'int'&gt;, {'apple': 2, 'banana': 1})\n</code></pre> <p><pre><code># Dictionary Basics\ncapitals = {\"USA\": \"Washington\",\n            \"India\": \"New Delhi\",\n            \"China\": \"Beijing\",  \n            \"Russia\": \"Moscow\"}\n\n# Accessing values\nprint(capitals.get(\"USA\"))  # Washington\nprint(capitals.get(\"India\"))  # New Delhi\n\n# Adding new key-value pair\ncapitals.update({\"Germany\": \"Berlin\"})\nprint(capitals)  # Includes Germany: Berlin\n\n# Updating existing value\ncapitals.update({\"USA\": \"Detroit\"})\nprint(capitals)  # USA now maps to Detroit\n\n# Removing a key-value pair\ncapitals.pop(\"China\")\nprint(capitals)  # China removed\n\n# Working with keys\n# Get all keys\nkeys = capitals.keys()\nprint(keys)  # dict_keys(['USA', 'India', 'Russia', 'Germany'])\n\n# Iterate through keys\nfor key in capitals.keys():\n    print(key)\n\n# Working with values\n# Get all values\nvalues = capitals.values()\nprint(values)  # dict_values(['Detroit', 'New Delhi', 'Moscow', 'Berlin'])\n\n# Iterate through values\nfor value in capitals.values():\n    print(value)\n\n# Working with items (key-value pairs)\n# Get all items\nitems = capitals.items()\nprint(items)  # dict_items([('USA', 'Detroit'), ('India', 'New Delhi'), ...])\n\n# Iterate through items\nfor key, value in capitals.items():\n    print(f\"{key}: {value}\")\n</code></pre> Output: <pre><code>Washington\nNew Delhi\n{'USA': 'Washington', 'India': 'New Delhi', 'China': 'Beijing', 'Russia': 'Moscow', 'Germany': 'Berlin'}\n{'USA': 'Detroit', 'India': 'New Delhi', 'China': 'Beijing', 'Russia': 'Moscow', 'Germany': 'Berlin'}\n{'USA': 'Detroit', 'India': 'New Delhi', 'Russia': 'Moscow', 'Germany': 'Berlin'}\ndict_keys(['USA', 'India', 'Russia', 'Germany'])\nUSA\nIndia\nRussia\nGermany\ndict_values(['Detroit', 'New Delhi', 'Moscow', 'Berlin'])\nDetroit\nNew Delhi\nMoscow\nBerlin\ndict_items([('USA', 'Detroit'), ('India', 'New Delhi'), ('Russia', 'Moscow'), ('Germany', 'Berlin')])\nUSA: Detroit\nIndia: New Delhi\nRussia: Moscow\nGermany: Berlin\n</code></pre></p> <p>Tip</p> <p>To display lists of all the attributes and methods for dictionaries:</p> <pre><code>capitals = {\"USA\": \"Washington\",\n            \"India\": \"New Delhi\",\n            \"China\": \"Beijing\",\n            \"Russia\": \"Moscow\"}\n\nprint(dir(capitals))\n</code></pre> <p>To display the in-depth description of attributes and methods for dictionaries:</p> <pre><code>capitals = {\"USA\": \"Washington\",\n            \"India\": \"New Delhi\",\n            \"China\": \"Beijing\",\n            \"Russia\": \"Moscow\"}\n\nprint(help(capitals))\n</code></pre>"},{"location":"Python/Data_Structures/#iterables","title":"Iterables","text":"<p>An iterable is any Python object or collection capable of returning its elements one at a time, allowing it to be iterated over in a loop. Iterables form the foundation of Python's iteration protocol.</p> <p>Additional Info</p> Characteristics of IterablesCommon Iterable Types <ol> <li>Can be looped over using <code>for</code> loops</li> <li>Can be used with functions that take sequences (<code>map()</code>, <code>filter()</code>, etc.)</li> <li>Many can be converted to other iterable types (lists, tuples, etc.)</li> </ol> <p>Basic Iterables:</p> <ul> <li>Lists: <code>[1, 2, 3]</code></li> <li>Tuples: <code>(1, 2, 3)</code></li> <li>Strings: <code>\"hello\"</code></li> <li>Dictionaries (iterates over keys by default)</li> <li>Sets: <code>{1, 2, 3}</code></li> </ul> <p>Speical Iterables:</p> <ul> <li>range objects: <code>range(5)</code></li> <li>File objects (iterate line by line)</li> <li>Generators and generator expressions</li> <li>zip, map, and filter objects</li> </ul> <p>Example</p> ListTuplesSetStringDictionary <p><pre><code>numbers = [1, 2, 3, 4, 5]\n\nfor number in numbers:\n    print(number)\n</code></pre> Output: <pre><code>1\n2\n3\n4\n5\n</code></pre></p> <p><pre><code>numbers = (1, 2, 3, 4, 5)\n\nfor number in numbers:\n    print(number)\n</code></pre> Output: <pre><code>1\n2\n3\n4\n5\n</code></pre></p> <p><pre><code>fruits = {\"apple\", \"orange\", \"banana\", \"coconut\"}\n\nfor fruit in fruits:\n    print(fruit)\n</code></pre> Output: <pre><code>apple\nbanana\norange\ncoconut\n</code></pre></p> <p><pre><code>name = \"John Cena\"\n\nfor character in name:\n    print(character, end=\" \")\n</code></pre> Output: <pre><code>J o h n   C e n a \n</code></pre></p> <p><pre><code>my_dictionary = {\"A\": 1, \"B\": 2, \"C\": 3}\n\nfor key, value in my_dictionary.items():\n    print(f\"{key} = {value}\")\n</code></pre> Output: <pre><code>A = 1\nB = 2\nC = 3\n</code></pre></p> <p>Did you know !?!</p> <p>You can use the <code>collections.abc.Iterable</code> abstract base class to check if an object is iterable: </p> <p><pre><code>from collections.abc import Iterable\n\ndef is_iterable(obj):\n    return isinstance(obj, Iterable)\n\nprint(is_iterable([1, 2, 3]))  # True\nprint(is_iterable(42))         # False\n</code></pre> Output: <pre><code>True\nFalse\n</code></pre></p>"},{"location":"Python/Data_Structures/#membership-operators","title":"Membership Operators","text":"<p>Membership operators in Python are used to test whether a value or variable is found in a sequence (like strings, lists, tuples, sets, or dictionaries). There are two membership operators:</p> <p>Note</p> Type of membership operatorsOther important notes <ol> <li><code>in</code> - Returns <code>True</code> if the specified value is found in the sequence</li> <li><code>not in</code> - Returns <code>True</code> if the specified value is not found in the sequence</li> </ol> <ul> <li>Membership operators are case-sensitive when used with strings</li> <li>For dictionaries, membership operators only check the keys by default</li> <li>These operators work with any iterable object in Python</li> <li>They are more readable alternatives to manually searching through sequences</li> </ul> <p>Membership operators are commonly used in conditional statements and loops to check for the presence or absence of elements.</p> <p>Example</p> ListsStringsTuplesSetsDictionariesUsing if-else <p><pre><code>fruits = ['apple', 'banana', 'cherry']\nprint('banana' in fruits)      # True\nprint('orange' not in fruits)  # True\n</code></pre> Output: <pre><code>True\nTrue\n</code></pre></p> <p><pre><code>message = \"Hello, World!\"\nprint('Hello' in message)      # True\nprint('Python' not in message) # True\n</code></pre> Output: <pre><code>True\nTrue\n</code></pre></p> <p><pre><code>numbers = (1, 2, 3, 4, 5)\nprint(3 in numbers)            # True\nprint(6 not in numbers)       # True\n</code></pre> Output: <pre><code>True\nTrue\n</code></pre></p> <p><pre><code>unique_numbers = {1, 3, 5, 7}\nprint(5 in unique_numbers)     # True\nprint(2 not in unique_numbers) # True\n</code></pre> Output: <pre><code>True\nTrue\n</code></pre></p> <p><pre><code>person = {'name': 'Alice', 'age': 25}\nprint('name' in person)        # True (checks keys)\nprint('Alice' in person)       # False (doesn't check values)\nprint('age' not in person)     # False\n</code></pre> Output: <pre><code>True\nFalse\nFalse\n</code></pre></p> <p><pre><code>word = \"APPLE\"\nletter = \"E\"\n\nif letter in word:\n   print(f\"There is a {letter}!\")\nelse: \n    print(f\"{letter} was not found!\") \n</code></pre> Output: <pre><code>There is a E!\n</code></pre></p> <p><pre><code>word = \"APPLE\"\nletter = \"Z\"\n\nif letter in word:\n   print(f\"There is a {letter}!\")\nelse: \n    print(f\"{letter} was not found!\") \n</code></pre> Output: <pre><code>Z was not found!\n</code></pre></p>"},{"location":"Python/Data_Structures/#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions provide a concise way to create lists in Python. They consist of brackets containing an expression followed by a <code>for</code> clause, then zero or more <code>for</code> or <code>if</code> clauses. They are compact and easier to read than traditional loops. </p> <p>Basic Formula</p> <pre><code>[expression for item in iterable]\n</code></pre> <p>Advantages</p> <ul> <li>More concise and readable than traditional loops</li> <li>Generally faster than equivalent for-loop implementations</li> <li>Can replace many cases where you'd use <code>map()</code> and <code>filter()</code></li> </ul> <p>Example</p> Simple List ComprehensionWith Conditional FilteringWith if-else ConditionNested LoopsFlattening a MatrixString Manipulation <p><pre><code># Create a list of squares from 0 to 9\nsquares = [x**2 for x in range(10)]\nprint(squares)\n</code></pre> Output: <pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre></p> <p><pre><code># Get only even numbers\nevens = [x for x in range(20) if x % 2 == 0]\nprint(evens)\n</code></pre> Output: <pre><code>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code></pre></p> <p><pre><code># Classify numbers as 'even' or 'odd'\nclassified = ['even' if x % 2 == 0 else 'odd' for x in range(5)]\nprint(classified)\n</code></pre> Output: <pre><code>['even', 'odd', 'even', 'odd', 'even']\n</code></pre></p> <p><pre><code># Create all possible pairs\npairs = [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\nprint(pairs)\n</code></pre> Output: <pre><code>[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</code></pre></p> <p><pre><code>matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)\n</code></pre> Output: <pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre></p> <p><pre><code>words = ['hello', 'world', 'python']\nupper_words = [word.upper() for word in words]\nprint(upper_words)\n</code></pre> Output: <pre><code>['HELLO', 'WORLD', 'PYTHON']\n</code></pre></p> <p>Python also supports:</p> <ul> <li>Dictionary comprehensions: <code>{key: value for item in iterable}</code></li> <li>Set comprehensions: <code>{expression for item in iterable}</code></li> </ul>"},{"location":"Python/Python%203/","title":"Introduction","text":"What is this section about? <p>Python 3 is a structured learning program designed to teach the Python programming language (version 3.x), covering fundamental concepts, advanced features, and practical applications.</p>"},{"location":"Python/Python%203/#course-overview","title":"Course Overview","text":"<ul> <li> <p> Python Basics     ---     Master syntax, variables, and I/O operations. Perfect starting point for beginners.</p> </li> <li> <p> Control Flow     ---     Learn conditionals, loops, and functions - the building blocks of programming logic.</p> </li> <li> <p> Data Structures     ---     Work with lists, dictionaries, strings, and comprehensions for efficient data handling.</p> </li> <li> <p> OOP     ---     Understand classes, inheritance, and magic methods for object-oriented design.</p> </li> <li> <p> Modules     ---     Leverage Python's standard library and install powerful third-party packages.</p> </li> <li> <p> Error Handling     ---     Implement robust exception handling and debugging techniques.</p> </li> <li> <p> File Handling     ---     Work with files, databases, and different data formats like JSON and CSV.</p> </li> <li> <p> Advanced Topics     ---     Dive into decorators, concurrency, and web development fundamentals.</p> </li> </ul>"},{"location":"Python/module/","title":"Module","text":"<p>What is module?</p> <p>In Python, a module is a file containing Python code (functions, classes, variables, or executable statements) that can be imported and reused in other programs. Modules help in organizing code logically, improving maintainability, and promoting reusability.</p> <p>Key Features and types of modules</p> <p>Key Features:</p> <ol> <li>Reusability \u2013 Write once, use multiple times.</li> <li>Namespace Separation \u2013 Avoid naming conflicts.</li> <li>Organization \u2013 Break large programs into manageable files.</li> </ol> <p>Types of Modules:</p> <ol> <li>Built-in Modules \u2013 Pre-installed with Python (e.g., <code>math</code>, <code>os</code>, <code>sys</code>).</li> <li>User-defined Modules \u2013 Created by users.</li> <li>Third-party Modules \u2013 Installed via pip (e.g., numpy, requests).</li> </ol> <p>Good to know!</p> <p>To show all the avalaible modules:</p> <pre><code>print(help(\"modules\"))\n</code></pre> <p>To list all avalaible variables and function in a module (eg. math):</p> <pre><code>import math\nprint(dir(\"math\"))\n</code></pre> <p>To show all the descriptions of variables and function within a module (eg. math):</p> <pre><code>import math\nprint(help(\"math\"))\n</code></pre>"},{"location":"Python/module/#user-defined-modules","title":"User-defined Modules","text":"<p>User-defined modules are Python files created by programmers to organize and reuse their own code.</p> <p>How to create?</p> <ol> <li>Create a new Python file (with <code>.py</code> extension)</li> <li>Write your functions, classes, or variables in this file</li> <li>Save it in the same directory as your main script or in Python's path</li> </ol> <p>Step-by-Step Example</p> <p>1. Create a Module (<code>mymodule.py</code>)</p> <pre><code># mymodule.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nPI = 3.14159\n</code></pre> <p>2. Import and Use the Module</p> <pre><code># main.py\nimport mymodule\n\nprint(mymodule.greet(\"Alice\"))  # Output: Hello, Alice!\nprint(mymodule.PI)              # Output: 3.14159\n</code></pre> <p>Alternative Import methods</p> <pre><code># Import specific attributes\nfrom mymodule import greet, PI\nprint(greet(\"Bob\"))  # No need for 'mymodule.' prefix\n\n# Import with an alias\nimport mymodule as mm\nprint(mm.greet(\"Charlie\"))\n\n# Import everything (not recommended)\nfrom mymodule import *\nprint(greet(\"Dave\"))\n</code></pre>"},{"location":"Python/module/#third-party-modules","title":"Third-party Modules","text":"<p>Third-party modules are Python packages created and maintained by developers outside of Python's core development team. These modules extend Python's functionality beyond what's available in the standard library. These modules are not included with Python and must be installed seperately and often focused on specific domains such as data science, web development, etc with specialized functionality. </p> <p>Popular Third-Party Modules</p> <p>Data Science &amp; Analytics:</p> <ul> <li><code>Numpy</code>: Numerical computing</li> <li><code>pandas</code>: Data manipulation and analysis</li> <li><code>matplotlib</code>: Data visualization</li> <li><code>scikit-learn</code>: Machine learning</li> </ul> <p>Web Development:</p> <ul> <li><code>Django</code>: High-level web framework</li> <li><code>Flask</code>: Micro web framework</li> <li><code>requests</code>: HTTP requests</li> <li><code>BeautifulSoup</code>: Web scraping</li> </ul> <p>Others:</p> <ul> <li><code>Pillow</code>: Image processing</li> <li><code>pygame</code>: Game development</li> <li><code>openpyxl</code>: Excel file manipulation</li> <li><code>selenium</code>: Web browser automation</li> </ul> <p>More details about third-party modules will be discussed individually in other sections !!</p> <p>How to Use</p> <ul> <li>Installation (using pip):</li> </ul> <pre><code>pip install package-name\n</code></pre> <ul> <li>Importing in Python:</li> </ul> <pre><code>import numpy as np\nfrom flask import Flask\n</code></pre>"},{"location":"Python/module/#built-in-modules","title":"Built-in Modules","text":"<p>Built-in modules are Python libraries that come pre-installed with Python, providing essential functionality without requiring additional installation. These modules are part of Python's standard library and are pre-installed. </p>"},{"location":"Python/module/#random-module","title":"Random module","text":"<p>The <code>random</code> module is a built-in Python module for generating pseudo-random numbers and performing random operations. It's commonly used for simulations, games, statistical sampling, and any application requiring randomization.</p> <p>Example</p> Basic Random NumbersInteger GenerationSequence OperationsSeeding (Reproducibility)Statistical Distributions <p><code>random()</code> - Returns float between 0.0 and 1.0</p> <pre><code>import random\nprint(random.random())  # e.g., 0.5488135039273248\n</code></pre> <p><code>uniform(a, b)</code> - Returns float between a and b</p> <pre><code>import random\nprint(random.uniform(1, 10))  # e.g., 5.711324\n</code></pre> <p><code>randint(a, b)</code> - Random integer between a and b (inclusive)</p> <pre><code>import random\nprint(random.randint(1, 6))  # Simulate dice roll (1-6)\n</code></pre> <p><code>randrange(start, stop, step)</code> - Random element from range()</p> <pre><code>import random\nprint(random.randrange(0, 100, 5))  # Multiple of 5 between 0-100\n</code></pre> <p>For large ranges, <code>randrange()</code> is more efficient than <code>randint()</code>!</p> <p><code>choice(seq)</code> - Random element from non-empty sequence</p> <pre><code>import random\ncolors = ['red', 'green', 'blue']\nprint(random.choice(colors))  # e.g., 'green'\n</code></pre> <p><code>shuffle(seq)</code> - Shuffle sequence in place</p> <pre><code>import random\ncards = list(range(1, 11))  # [1, 2, 3,...10]\nrandom.shuffle(cards)\nprint(cards)  # e.g., [7, 2, 9, 1,...]\n</code></pre> <p><code>sample(population, k)</code> - k unique random elements</p> <pre><code>import random\nprint(random.sample(range(100), 5))  # 5 unique numbers 0-99\n</code></pre> <p><code>seed()</code> - Random integer between a and b (inclusive)</p> <pre><code>random.seed(42)  # Initialize with fixed seed\nprint(random.random())  # Always 0.6394267984578837 with seed 42\n</code></pre> <ul> <li><code>gauss(mu, sigma)</code> - Gaussian distribution</li> <li><code>expovariate(lambd)</code> - Exponential distribution</li> <li><code>betavariate(alpha, beta)</code> - Beta distribution</li> </ul> <p>For the entire list you may refer to Source: W3Schools</p>"},{"location":"Python/module/#math-module","title":"Math module","text":"<p>The <code>math</code> module is a built-in Python module that provides mathematical functions and constants. It's essential for scientific computing, data analysis, and any application requiring advanced mathematical operations.</p> <p>Make sure you import the module!</p> <pre><code>import math\n</code></pre> <p>Example</p> Commonly Used ConstantsNumber-Theoretic and Representation FunctionsPower and Logarithmic FunctionsTrigonometric FunctionsAngular ConversionHyperbolic FunctionsSpecial Functions <pre><code>math.pi       # \u03c0 (pi) \u2248 3.141592653589793\nmath.e        # Euler's number \u2248 2.718281828459045\nmath.tau      # Tau (2\u03c0) \u2248 6.283185307179586\nmath.inf      # Infinity\nmath.nan      # Not a Number\n</code></pre> <pre><code>math.ceil(x)    # Smallest integer \u2265 x\nmath.floor(x)   # Largest integer \u2264 x\nmath.trunc(x)   # Truncates x to an integer\nmath.fabs(x)    # Absolute value as float\nmath.factorial(x) # Factorial of x\nmath.gcd(a, b)  # Greatest common divisor\nmath.isfinite(x) # Check if x is finite\nmath.isinf(x)    # Check if x is infinity\nmath.isnan(x)    # Check if x is NaN\n</code></pre> <pre><code>math.pow(x, y)   # x raised to power y\nmath.sqrt(x)     # Square root of x\nmath.exp(x)      # e raised to power x\nmath.log(x[, base]) # Logarithm of x (default base e)\nmath.log10(x)    # Base-10 logarithm\nmath.log2(x)     # Base-2 logarithm\n</code></pre> <pre><code>math.sin(x)     # Sine of x radians\nmath.cos(x)     # Cosine of x radians\nmath.tan(x)     # Tangent of x radians\nmath.asin(x)    # Arc sine (in radians)\nmath.acos(x)    # Arc cosine (in radians)\nmath.atan(x)    # Arc tangent (in radians)\nmath.atan2(y, x) # atan(y / x) in radians\nmath.hypot(x, y) # Euclidean distance (sqrt(x\u00b2 + y\u00b2))\n</code></pre> <pre><code>math.degrees(x)  # Convert radians to degrees\nmath.radians(x)  # Convert degrees to radians\n</code></pre> <pre><code>math.sinh(x)    # Hyperbolic sine\nmath.cosh(x)    # Hyperbolic cosine\nmath.tanh(x)    # Hyperbolic tangent\nmath.asinh(x)   # Inverse hyperbolic sine\nmath.acosh(x)   # Inverse hyperbolic cosine\nmath.atanh(x)   # Inverse hyperbolic tangent\n</code></pre> <pre><code>math.erf(x)     # Error function\nmath.erfc(x)    # Complementary error function\nmath.gamma(x)   # Gamma function\nmath.lgamma(x)  # Natural log of absolute value of Gamma\n</code></pre> <p>For the entire list you may refer to Source: W3Schools</p>"}]}